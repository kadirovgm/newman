{
  "info": {
    "_postman_id": "b8602837-ca26-46b5-a54d-66c1d18892ab",
    "name": "QA_automation",
    "description": "# Introduction\nAHS project's API automation collection\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Setting_variables_auto",
      "item": [
        {
          "name": "/users/jwt/create/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//GET JWT Token\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"JWT_ACCESS\", jsonData.access);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "c31c04d5-9081-4e88-81cb-c7741aa9bc0b"
              }
            }
          ],
          "_postman_id": "14d566e1-b8f4-43bb-b46c-35784974a2e8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"admin@admin.com\",\r\n  \"password\": \"P@ssw0rd1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/jwt/create/"
          },
          "response": []
        },
        {
          "name": "/lock/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "//GET id_country",
                  "pm.test(\"Set variable id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    //console.log('This is jsonData', jsonData.id)",
                  "    pm.globals.set(\"ID_LOCK\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "7afd3f58-7d64-44b1-9e52-7fa8d9b34342"
              }
            }
          ],
          "_postman_id": "7639d985-cc7b-442c-a33b-f8035f37d2ed",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/lock/"
          },
          "response": []
        },
        {
          "name": "/lock/{id}",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "1e447b89-b36c-453e-9270-3f05d48cc059"
              }
            }
          ],
          "_postman_id": "4dcf18eb-10c9-4ea4-b444-8627325b4d9a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key_change_in_progress\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/lock/{{ID_LOCK}}/"
          },
          "response": []
        },
        {
          "name": "/persons/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//GET id_person\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.globals.set(\"ID_PERSON\", jsonData.results[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "be80dbfd-4457-44e5-bfd0-19705ce4966e"
              }
            }
          ],
          "_postman_id": "0b5e55d7-98b5-48db-87b4-de14a5c26d84",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/persons/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "persons",
                ""
              ],
              "query": [
                {
                  "key": "first_name",
                  "value": "Rick",
                  "disabled": true
                },
                {
                  "key": "middle_name",
                  "value": "Smith",
                  "disabled": true
                },
                {
                  "key": "last_name",
                  "value": "HR Last_Name",
                  "disabled": true
                },
                {
                  "key": "english_level",
                  "value": "advanced",
                  "disabled": true
                },
                {
                  "key": "office_location",
                  "value": "USA",
                  "disabled": true
                },
                {
                  "key": "assigned_hrs",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "relocation_desire",
                  "value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
                  "disabled": true
                },
                {
                  "key": "residence_type",
                  "value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "/projects/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//GET id_person\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var index = Math.trunc(Math.random()*jsonData.length);\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.globals.set(\"ID_PROJECT\", jsonData[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "e96f572e-af53-48da-861b-fa5eb48b76ec"
              }
            }
          ],
          "_postman_id": "8c9d9654-6e5e-4bfc-9d89-fdb38b185734",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/projects/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "projects",
                ""
              ],
              "query": [
                {
                  "key": "status",
                  "value": "finished",
                  "disabled": true
                },
                {
                  "key": "page_filter",
                  "value": "positions_history",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "/positions/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//GET id_person\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var index = Math.trunc(Math.random()*jsonData.length);\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.globals.set(\"ID_POSITION\", jsonData[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "a9bea441-f4a0-4d0f-911c-3ca94f9ca3b0"
              }
            }
          ],
          "_postman_id": "681b392f-c467-498d-9436-92673bb60679",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [],
              "options": {
                "urlencoded": {}
              }
            },
            "url": {
              "raw": "{{host}}/positions/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "positions",
                ""
              ],
              "query": [
                {
                  "key": "page_filter",
                  "value": "mine",
                  "disabled": true
                },
                {
                  "key": "title",
                  "value": "Apple project",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "rejected",
                  "disabled": true
                },
                {
                  "key": "position_type",
                  "value": "bench",
                  "disabled": true
                },
                {
                  "key": "ordering",
                  "value": "created_at",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "project",
                  "value": "Ap",
                  "disabled": true
                },
                {
                  "key": "position_hrs",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "job_type",
                  "value": "part_time",
                  "disabled": true
                },
                {
                  "key": "location",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "/clients/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Responce is JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var index = Math.trunc(Math.random()*jsonData.length);\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.globals.set(\"ID_CLIENT\", jsonData[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "f899f116-1b2a-437a-8e48-2a12f0c28e5e"
              }
            }
          ],
          "_postman_id": "72cc25e2-09d3-480a-b5ff-eb28108eb354",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/clients/"
          },
          "response": []
        },
        {
          "name": "/residence/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "//GET id_residence ",
                  "pm.test(\"Set variable id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    //console.log('This is jsonData', jsonData.id)",
                  "    var index = Math.trunc(Math.random()*jsonData.length);",
                  "    pm.globals.set(\"ID_RESIDENCE\", jsonData[index].id);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "34e80a08-e535-43fa-8979-2663247cdb43"
              }
            }
          ],
          "_postman_id": "4ec6f590-aa04-4031-8b45-b62f2e903dae",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/residences/"
          },
          "response": []
        },
        {
          "name": "/countries/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "//GET id_country",
                  "pm.test(\"Set variable id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    //console.log('This is jsonData', jsonData.id)",
                  "    var index = Math.trunc(Math.random()*jsonData.length);",
                  "    pm.globals.set(\"ID_COUNTRY\", jsonData[index].id);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "be9884ee-bafb-477f-9d14-d699723880e7"
              }
            }
          ],
          "_postman_id": "cc714d1c-8f4a-444b-be16-d62065134801",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/countries/"
          },
          "response": []
        },
        {
          "name": "/cities/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Responce is JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.globals.set(\"ID_CITY\", jsonData.results[index].id);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "39f7871d-bdcd-413e-83b0-0dd7ab06bca2"
              }
            }
          ],
          "_postman_id": "5189801c-2571-4db7-a1d1-080963e9af1b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/cities/"
          },
          "response": []
        },
        {
          "name": "/skills/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
                  "    pm.globals.set(\"ID_SKILLS\", jsonData.results[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "de16a50b-eb88-4bbf-8401-232867714b2f"
              }
            }
          ],
          "_postman_id": "f990197e-ee34-4c13-859e-19e633096941",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/skills/"
          },
          "response": []
        },
        {
          "name": "​/roles​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    var index = Math.trunc(Math.random()*jsonData.length);\r",
                  "    pm.globals.set(\"ID_ROLE\", jsonData[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "7a98d3bc-d451-4f0b-9749-c107cfcca6a4"
              }
            }
          ],
          "_postman_id": "1b0c7293-8828-4e94-98d1-3f69b3badd9d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/roles/"
          },
          "response": []
        },
        {
          "name": "/position-seats/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//GET id_pso\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    var index = Math.trunc(Math.random()*jsonData.length);\r",
                  "    pm.globals.set(\"ID_PS\", jsonData[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "c4d8e938-dc78-493c-9bb7-4626a46e713a"
              }
            }
          ],
          "_postman_id": "585c0bbb-4664-4609-a848-4549179468b5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/position-seats/"
          },
          "response": []
        },
        {
          "name": "/position-seats-occupations/ Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking ",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Responce is JSON\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "//GET id_pso",
                  "pm.test(\"Set variable id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    //console.log('This is jsonData', jsonData.id)",
                  "    var index = Math.trunc(Math.random()*jsonData.length);",
                  "    pm.globals.set(\"ID_PSO\", jsonData[index].id);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "b8302d81-8279-4aa9-846f-2ca66129b180"
              }
            }
          ],
          "_postman_id": "1fca9263-9cd9-498e-8c56-51bcba5ca0e6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/position-seat-occupations/"
          },
          "response": []
        },
        {
          "name": "​/tech-interviews​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  " //const jsonData = pm.response.json();\r",
                  " //const index = Math.trunc(Math.random() * jsonData.response.length);\r",
                  " //const item = jsonData.response[index];\r",
                  "\r",
                  " //pm.collectionVariables.set(\"test-itemId\", item.id);\r",
                  "\r",
                  "//GET id_person\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var index = Math.trunc(Math.random()*jsonData.length);\r",
                  "    \r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.globals.set(\"ID_TECH_INTERVIEW\", jsonData[index].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "5a8ef081-90f4-4075-be56-1ac1ebb96f79"
              }
            }
          ],
          "_postman_id": "bffe35e1-bb7f-45be-b697-377b34d3e80d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/tech-interviews/"
          },
          "response": []
        }
      ],
      "_postman_id": "976f8e4a-0ae7-4084-8888-b63956a0184e"
    },
    {
      "name": "Interviews_auto",
      "item": [
        {
          "name": "base-interviews_auto",
          "item": [
            {
              "name": "/base-interviews/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//Status and format checking \r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Responce is JSON\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "// GET /Persons/ for getting id_peron\r",
                      "// postman.setNextRequest(\"4c778f38-d4f5-4a6b-a6a3-cacd7a3e07f4\");"
                    ],
                    "type": "text/javascript",
                    "id": "7206ce35-60fa-4cef-b029-5b68ea543731"
                  }
                }
              ],
              "_postman_id": "72652dfd-f5c0-4cef-97a9-91ae95d83712",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/base-interviews/"
              },
              "response": []
            },
            {
              "name": "/base-interviews/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//Checking for correct responce code\r",
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_base_interview\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "6a83d6d7-0f3d-4ede-84b4-3edce2a5ff7a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// random base-interview title\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"base_int_test\", \"base_int\"+rnd);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "20799c34-f14e-45f4-b3eb-60332da7009e"
                  }
                }
              ],
              "_postman_id": "7d31e031-0c4d-4199-8954-f218698c4507",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"date\": \"2021-10-13T21:01:58.610Z\",\n  \"title\": \"{{base_int_test}}\",\n  \"decision\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/base-interviews/"
              },
              "response": []
            },
            {
              "name": "/base-interviews/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that base_interview and person titles are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"base_int_test\"));",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"))",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "583d0982-3cef-4caf-86e9-336429c56416"
                  }
                }
              ],
              "_postman_id": "9fe4ee18-598f-40c8-af0b-29e7175d2be9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/base-interviews/{{id_base_interview}}/"
              },
              "response": []
            },
            {
              "name": "/base-interviews/{id}/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// random base-interview title",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);",
                      "postman.setEnvironmentVariable(\"base_int_test\", \"base_int\"+rnd);",
                      "",
                      "// GET /Persons/ for getting interviewee_id",
                      "// postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");"
                    ],
                    "type": "text/javascript",
                    "id": "b6754a45-bd6b-4dc9-847b-8b6dcd5df791"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that base_interview and person titles are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"base_int_test\"));",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"))",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "a82ec7f7-29b7-4299-a86b-53250d581876"
                  }
                }
              ],
              "_postman_id": "2b9e87cc-a44e-499d-88e5-40fbd122d6e0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"date\": \"2021-10-13T19:42:02.127Z\",\n  \"title\": \"{{base_int_test}}\",\n  \"decision\": \"waiting\",\n  \"summary\": \"test summary\",\n  \"is_feedback_added\": true,\n  \"interviewee\": \"{{ID_PERSON}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/base-interviews/{{id_base_interview}}/"
              },
              "response": []
            },
            {
              "name": "/base-interviews/{id}/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// random base-interview title",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);",
                      "postman.setEnvironmentVariable(\"base_int_test\", \"base_int\"+rnd);",
                      "",
                      "// GET /Persons/ for getting interviewee_id",
                      "//postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");"
                    ],
                    "type": "text/javascript",
                    "id": "aef688a0-a19f-43fe-9e9e-f5525c55db13"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that base_interview and person titles are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"base_int_test\"));",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"))",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "ef0b8d9e-ffc6-401d-b39a-b8c0726961da"
                  }
                }
              ],
              "_postman_id": "5b442347-49da-4820-bdb2-b29ab9290563",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"date\": \"2021-10-13T21:01:58.610Z\",\n  \"title\": \"{{base_int_test}}\",\n  \"decision\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/base-interviews/{{id_base_interview}}/"
              },
              "response": []
            },
            {
              "name": "/base-interviews/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "edbe0f79-5d1e-4136-82a5-a61f520ff7e3"
                  }
                }
              ],
              "_postman_id": "855dcb1a-8441-4ed0-8073-88519063d852",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "{{host}}/base-interviews/{{id_base_interview}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "d38028b8-b523-4552-a127-5e88349739ce",
          "_postman_isSubFolder": true
        },
        {
          "name": "hr-interviews_auto",
          "item": [
            {
              "name": "/hr-interviews/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "1c7d8244-85fb-4488-8203-c3c245fe4077"
                  }
                }
              ],
              "_postman_id": "edf3209b-3b49-43df-a1b1-94594b8b2685",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/hr-interviews/"
              },
              "response": []
            },
            {
              "name": "/hr-interviews/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// GET /Persons/ for getting interviewee_id",
                      "//postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");",
                      "",
                      "",
                      "// GET /residence/ for getting id_residences",
                      "//postman.setNextRequest(\"17027039-a8af88de-bf09-4e71-a0d1-931753bcd8ff\");",
                      "",
                      "// Get /country/ for getting id_country",
                      "//postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");",
                      "",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);",
                      "postman.setEnvironmentVariable(\"title_hr_int\", \"hr-int-test\"+rnd);",
                      "",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "310ecf5a-857b-49b6-9cd1-25ef546a2edb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//Checking for correct responce code",
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                      "});",
                      "",
                      "// Set var 'id' ",
                      "pm.test(\"Set variable id\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    //console.log('This is jsonData', jsonData.id)",
                      "    pm.environment.set(\"id_hr_interview\", jsonData.id);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "1e7f31a8-f5c9-435b-9b14-93cc9de660e2"
                  }
                }
              ],
              "_postman_id": "4231f6b4-e362-45af-83c0-e1314a0541ba",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"date\": \"2021-10-25T16:00:48.180Z\",\n  \"title\": \"{{title_hr_int}}\",\n  \"decision\": \"waiting\",\n  \"is_feedback_added\": null,\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"motivation\": \"test-motivation\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"test-english\",\n  \"salary\": \"test-salary\",\n  \"residences\": [\n      \"{{ID_RESIDENCE}}\"\n  ],\n  \"relocation_desires\": [\n    \"{{ID_COUNTRY}}\"\n  ],\n  \"relocation_desire_comment\": \"test-comment\",\n  \n  \"summary\": \"test-summary\",\n  \"rejection_reason\": \"test-reject-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/hr-interviews/"
              },
              "response": []
            },
            {
              "name": "​/hr-interviews​/{id}​/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that title of variables are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
                      "        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));",
                      "        //pm.expect(jsonData.relocation_desires[0].id).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_int\"));",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "5c445248-c7f7-492f-8ae7-d2a4b667facb"
                  }
                }
              ],
              "_postman_id": "e532fe14-fcad-469c-9abd-7d0cb2503008",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/hr-interviews/{{id_hr_interview}}/"
              },
              "response": []
            },
            {
              "name": "/hr-interviews/{id}/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// GET /Persons/ for getting interviewee_id",
                      "//postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");",
                      "",
                      "// GET /residence/ for getting id_residences",
                      "//postman.setNextRequest(\"17027039-a8af88de-bf09-4e71-a0d1-931753bcd8ff\");",
                      "",
                      "// Get /country/ for getting id_country",
                      "//postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "81bbca8b-4072-4357-a32e-0b39c6594d60"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that title of variables are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
                      "        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));",
                      "        //pm.expect(jsonData.relocation_desires[0].id).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_int\"));",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "eb6a6b1a-4249-443d-b48d-b3551c46b07d"
                  }
                }
              ],
              "_postman_id": "cf866886-63e3-435e-ae09-f23786d2ebf9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"date\": \"2021-10-25T16:00:48.180Z\",\n  \"title\": \"{{title_hr_int}}\",\n  \"decision\": \"waiting\",\n  \"is_feedback_added\": null,\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"motivation\": \"test-motivation\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"test-english\",\n  \"salary\": \"test-salary\",\n  \"residences\": [\n      \"{{ID_RESIDENCE}}\"\n  ],\n  \"relocation_desires\": [\n    \"{{ID_COUNTRY}}\"\n  ],\n  \"relocation_desire_comment\": \"test-comment\",\n  \n  \"summary\": \"test-summary\",\n  \"rejection_reason\": \"test-reject-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/hr-interviews/{{id_hr_interview}}/"
              },
              "response": []
            },
            {
              "name": "/hr-interviews/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that title of variables are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
                      "        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));",
                      "        //pm.expect(jsonData.relocation_desires[0].id).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_int\"));",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "98c9005b-3bf4-4be8-9666-df23c5e37c6a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// // GET /Persons/ for getting interviewee_id",
                      "// postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");",
                      "",
                      "// // GET /residence/ for getting id_residences",
                      "// postman.setNextRequest(\"17027039-a8af88de-bf09-4e71-a0d1-931753bcd8ff\");",
                      "",
                      "// // Get /country/ for getting id_country",
                      "// postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "53715ad5-e643-4e54-94b5-d6987dad44e7"
                  }
                }
              ],
              "_postman_id": "efd07399-fa0d-4193-905e-f972b8c3c574",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"date\": \"2021-10-25T16:00:48.180Z\",\n  \"title\": \"{{title_hr_int}}\",\n  \"decision\": \"waiting\",\n  \"is_feedback_added\": null,\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"motivation\": \"test-motivation\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"test-english\",\n  \"salary\": \"test-salary\",\n  \"residences\": [\n      \"{{ID_RESIDENCE}}\"\n  ],\n  \"relocation_desires\": [\n    \"{{ID_COUNTRY}}\"\n  ],\n  \"relocation_desire_comment\": \"test-comment\",\n  \n  \"summary\": \"test-summary\",\n  \"rejection_reason\": \"test-reject-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/hr-interviews/{{id_hr_interview}}/"
              },
              "response": []
            },
            {
              "name": "​/hr-interviews​/{id}​/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "1ddd58a8-c2b8-435f-b151-feb462bfb7e7"
                  }
                }
              ],
              "_postman_id": "59f8f568-1000-43ca-8856-2c19b58be7ac",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/hr-interviews/{{id_hr_interview}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "e6777dc2-2eb2-4151-ba00-afd79cd79429",
          "_postman_isSubFolder": true
        },
        {
          "name": "position-interviews_auto",
          "item": [
            {
              "name": "/position-interviews/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "967ef75e-10e2-4345-90a9-3fc077f5595c"
                  }
                }
              ],
              "_postman_id": "ff1c7075-8449-4b1d-b91c-96474d97d4c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-interviews/"
              },
              "response": []
            },
            {
              "name": "/position-interviews/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// random base-interview title",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);",
                      "postman.setEnvironmentVariable(\"title_position_interview\", \"position_interview\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "8ce9a0d1-4c95-4c35-93af-3ccdc42a3d2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//Checking for correct responce code",
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                      "});",
                      "",
                      "// Set var 'id' ",
                      "pm.test(\"Set variable id\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    //console.log('This is jsonData', jsonData.id)",
                      "    pm.environment.set(\"id_position_interview\", jsonData.id);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e3943990-b4c8-4a0b-88d6-ca1553107144"
                  }
                }
              ],
              "_postman_id": "a6283787-b2de-4be1-af4f-2a9e19ae9d81",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"interviewee\": \"{{ID_PERSON}}\",\r\n  \"interviewers\": [\r\n    \"Test-interviewer-1\",\r\n    \"Test-interviewer-2\"\r\n  ],\r\n  \"position_interview_type\": \"client_interview\",\r\n  \"title\": \"{{title_position_interview}}\",\r\n  \"date\": \"2021-10-18T13:15:55.413Z\",\r\n  \"decision\": \"waiting\",\r\n  \"position_seat_occupation\": \"{{ID_PSO}}\",\r\n  \"summary\": \"test-summary\",\r\n  \"rejection_reason\": \"test-rejection-reason\",\r\n  \"outcome_comment\": \"test-comment\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-interviews/"
              },
              "response": []
            },
            {
              "name": "/position-interviews/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that title of variables are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_interview\"));",
                      "        pm.expect(jsonData.position_seat_occupation).to.eql(pm.globals.get(\"ID_PSO\"));",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "7699fec3-e456-4c26-bb23-af6ce13b3833"
                  }
                }
              ],
              "_postman_id": "4f0b2d0e-fc62-453f-85e9-f5be2838dcff",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-interviews/{{id_position_interview}}/"
              },
              "response": []
            },
            {
              "name": "/position-interviews/{id}",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// random base-interview title",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);",
                      "postman.setEnvironmentVariable(\"title_position_interview\", \"position_interview\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "57d2a064-e8a8-46ee-8bd0-55077ab61365"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that title of variables are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_interview\"));",
                      "        pm.expect(jsonData.position_seat_occupation).to.eql(pm.globals.get(\"ID_PSO\"));",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "545691cc-e5f0-4f3e-b202-ac2d043ceeab"
                  }
                }
              ],
              "_postman_id": "26e159b1-bd2c-44fb-82e3-4be61b36c85b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"interviewee\": \"{{ID_PERSON}}\",\r\n  \"interviewers\": [\r\n    \"Test-interviewer-1\",\r\n    \"Test-interviewer-2\"\r\n  ],\r\n  \"position_interview_type\": \"client_interview\",\r\n  \"title\": \"{{title_position_interview}}\",\r\n  \"date\": \"2021-10-18T13:15:55.413Z\",\r\n  \"decision\": \"waiting\",\r\n  \"position_seat_occupation\": \"{{ID_PSO}}\",\r\n  \"summary\": \"test-summary\",\r\n  \"rejection_reason\": \"test-rejection-reason\",\r\n  \"outcome_comment\": \"test-comment\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-interviews/{{id_position_interview}}/"
              },
              "response": []
            },
            {
              "name": "/position-interviews/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//Checking for correct title",
                      "pm.test(\"Verify that title of variables are correct\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        //console.log('This is jsonData', jsonData.title)",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_interview\"));",
                      "        pm.expect(jsonData.position_seat_occupation).to.eql(pm.globals.get(\"ID_PSO\"));",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "a7799c7a-3c58-4076-b2cc-b688703763f3"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// random base-interview title",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);",
                      "postman.setEnvironmentVariable(\"title_position_interview\", \"position_interview\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "8783bd44-b125-4fb7-ac81-617c9774154e"
                  }
                }
              ],
              "_postman_id": "5b2a363e-42ab-40b0-95f3-87baaf8dc726",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"interviewee\": \"{{ID_PERSON}}\",\r\n  \"interviewers\": [\r\n    \"Test-interviewer-1\",\r\n    \"Test-interviewer-2\"\r\n  ],\r\n  \"position_interview_type\": \"client_interview\",\r\n  \"title\": \"{{title_position_interview}}\",\r\n  \"date\": \"2021-10-18T13:15:55.413Z\",\r\n  \"decision\": \"waiting\",\r\n  \"position_seat_occupation\": \"{{ID_PSO}}\",\r\n  \"summary\": \"test-summary\",\r\n  \"rejection_reason\": \"test-rejection-reason\",\r\n  \"outcome_comment\": \"test-comment\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-interviews/{{id_position_interview}}/"
              },
              "response": []
            },
            {
              "name": "/position-interviews/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "14c2cd57-03a6-4eb6-9d76-a7575c12c6da"
                  }
                }
              ],
              "_postman_id": "abbfc929-e872-4693-a8ad-86f5ecae30d9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-interviews/{{id_position_interview}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "155825f1-852c-4955-8e09-14a36534ce5d",
          "_postman_isSubFolder": true
        },
        {
          "name": "tech-interviews_auto",
          "item": [
            {
              "name": "​/tech-interviews​/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a103ce0d-3c98-4e9b-8445-4e275e81b3b7"
                  }
                }
              ],
              "_postman_id": "3ad22d28-a229-452d-8249-e520f294a590",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/tech-interviews/"
              },
              "response": []
            },
            {
              "name": "​/tech-interviews​/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_tech_interview\", \"tech-interview\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "bd87851a-d31f-4c99-9f1b-f2781e6f145d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_tech_interview\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "a8b7f822-fb3e-4f2c-9d50-697c3e8ba304"
                  }
                }
              ],
              "_postman_id": "1e11159e-97d8-4f3b-a017-1078df6c9bdc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"title\": \"{{title_tech_interview}}\",\n  \"tech_interview_type\": \"position\",\n  \"strong_sides\": \"strong_side-test\",\n  \"weak_sides\": \"weak_side-test\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"english-level-test\",\n  \"soft_skills\": \"soft-skill-test\",\n  \"team_skills\": \"team-skill-test\",\n  \"tech_skills\": \"tech-skill-test\",\n  \"system_design\": \"system-design-test\",\n  \"coding_task\": \"coding-task-test\",\n  \"date\": \"2021-10-18T14:30:36.760Z\",\n  \"decision\": \"waiting\",\n  \"position_seat_occupation\": \"{{ID_PSO}}\",\n  \"summary\": \"summary-test\",\n  \"rejection_reason\": \"rejection-reason-test\",\n  \"outcome_comment\": \"outcome-comment-test\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/tech-interviews/"
              },
              "response": []
            },
            {
              "name": "​/tech-interviews​/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_interview\"));\r",
                      "        pm.expect(jsonData.position_seat_occupation).to.eql(pm.globals.get(\"ID_PSO\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "e9393e43-6d77-4c0e-bd36-cd5b9fa171cd"
                  }
                }
              ],
              "_postman_id": "86a8a0f1-8d95-41fb-bdfb-5fae63214000",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/tech-interviews/{{id_tech_interview}}/"
              },
              "response": []
            },
            {
              "name": "​/tech-interviews​/ {id}/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_tech_interview\", \"tech-interview\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "2f15f092-314f-41e4-ac88-e1bb01bba62b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_interview\"));\r",
                      "        pm.expect(jsonData.position_seat_occupation).to.eql(pm.globals.get(\"ID_PSO\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "611630d8-1ead-43c0-9324-02f1c9af8ccc"
                  }
                }
              ],
              "_postman_id": "e713d7d2-7cc6-4961-a7b0-2125d9171e85",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"title\": \"{{title_tech_interview}}\",\n  \"tech_interview_type\": \"position\",\n  \"strong_sides\": \"strong_side-test\",\n  \"weak_sides\": \"weak_side-test\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"english-level-test\",\n  \"soft_skills\": \"soft-skill-test\",\n  \"team_skills\": \"team-skill-test\",\n  \"tech_skills\": \"tech-skill-test\",\n  \"system_design\": \"system-design-test\",\n  \"coding_task\": \"coding-task-test\",\n  \"date\": \"2021-10-18T14:30:36.760Z\",\n  \"decision\": \"waiting\",\n  \"position_seat_occupation\": \"{{ID_PSO}}\",\n  \"summary\": \"summary-test\",\n  \"rejection_reason\": \"rejection-reason-test\",\n  \"outcome_comment\": \"outcome-comment-test\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/tech-interviews/{{id_tech_interview}}/"
              },
              "response": []
            },
            {
              "name": "​/tech-interviews​/ {id}/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_tech_interview\", \"tech-interview\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "866b2338-461c-4023-9c38-e089bef1f12a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_interview\"));\r",
                      "        pm.expect(jsonData.position_seat_occupation).to.eql(pm.globals.get(\"ID_PSO\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "7d00a46a-4dce-4172-be33-925d66b49482"
                  }
                }
              ],
              "_postman_id": "653a882d-00d6-4d42-a6ed-f411dc98acc9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"title\": \"{{title_tech_interview}}\",\n  \"tech_interview_type\": \"position\",\n  \"strong_sides\": \"strong_side-test\",\n  \"weak_sides\": \"weak_side-test\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"english-level-test\",\n  \"soft_skills\": \"soft-skill-test\",\n  \"team_skills\": \"team-skill-test\",\n  \"tech_skills\": \"tech-skill-test\",\n  \"system_design\": \"system-design-test\",\n  \"coding_task\": \"coding-task-test\",\n  \"date\": \"2021-10-18T14:30:36.760Z\",\n  \"decision\": \"waiting\",\n  \"position_seat_occupation\": \"{{ID_PSO}}\",\n  \"summary\": \"summary-test\",\n  \"rejection_reason\": \"rejection-reason-test\",\n  \"outcome_comment\": \"outcome-comment-test\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/tech-interviews/{{id_tech_interview}}/"
              },
              "response": []
            },
            {
              "name": "​/tech-interviews​/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "eab8fdb0-5a64-4d8e-8767-38c52ca9133e"
                  }
                }
              ],
              "_postman_id": "75fe5d6a-27e2-441b-a2e9-3da39f5cb719",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/tech-interviews/{{id_tech_interview}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "03546ef1-8430-49c7-9be8-737af66b46ff",
          "_postman_isSubFolder": true
        },
        {
          "name": "tech-interview-skills_auto",
          "item": [
            {
              "name": "​/tech-interview-skills​/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "0bfa8193-3e23-414f-b307-20cd66235423"
                  }
                }
              ],
              "_postman_id": "a8762cc3-e626-4236-90ea-59763716c09a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/tech-interview-skills/"
              },
              "response": []
            },
            {
              "name": "​/tech-interview-skills​/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_tech_interview_skills\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "d5febf92-f7e4-4afe-a5b3-9ae451cadff2"
                  }
                }
              ],
              "_postman_id": "ab53881d-f77d-46ee-bd95-308484f94481",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"assumption_grade\": \"senior\",\n  \"real_grade\": \"senior\",\n  \"is_additional\": false,\n  \"tech_interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/tech-interview-skills/"
              },
              "response": []
            },
            {
              "name": "​/tech-interviews-skills/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.tech_interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "2adbbfc1-4474-45d6-8ff9-17d1a158e4d3"
                  }
                }
              ],
              "_postman_id": "d0d5174f-c559-4ab1-bb5a-25211dd1d3d0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/"
              },
              "response": []
            },
            {
              "name": "​/tech-interview-skills​/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.tech_interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "1ef40f97-9626-4f97-8330-4dd65a253a32"
                  }
                }
              ],
              "_postman_id": "decba70f-6640-457f-9c3a-64ccd7007638",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"assumption_grade\": \"senior\",\n  \"real_grade\": \"senior\",\n  \"is_additional\": false,\n  \"tech_interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/"
              },
              "response": []
            },
            {
              "name": "​/tech-interview-skills​/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.tech_interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "0d53694b-d56b-4c2d-ad55-e559de719e51"
                  }
                }
              ],
              "_postman_id": "c256ecb7-c372-46b1-bea3-678002aea8ec",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"assumption_grade\": \"senior\",\n  \"real_grade\": \"senior\",\n  \"is_additional\": false,\n  \"tech_interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/"
              },
              "response": []
            },
            {
              "name": "​/tech-interview-skills​/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "1536af5a-5d29-4e0a-8ece-ae9b42b08b1e"
                  }
                }
              ],
              "_postman_id": "9e2c84d6-1b74-4c61-aa70-10b8c003f37e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "2f23c705-7423-4018-97bf-760be642ab6a",
          "_postman_isSubFolder": true
        },
        {
          "name": "interviewers_auto",
          "item": [
            {
              "name": "/interviewers/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "ac3355f0-e93d-44bd-a171-88c9c84ce2e2"
                  }
                }
              ],
              "_postman_id": "a20ad604-b7cf-40db-a923-9867cc147c3f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/interviewers/"
              },
              "response": []
            },
            {
              "name": "/interviewers/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_interviewers\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "4235eff0-27d2-46d3-80e8-54855a1931ff"
                  }
                }
              ],
              "_postman_id": "47dd1490-96e8-423f-aafc-57268b8935ad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"area\": [\n    \"soft_skill\"\n  ],\n  \"is_primary\": true,\n  \"interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"interviewer\": \"{{ID_PERSON}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/interviewers/"
              },
              "response": []
            },
            {
              "name": "/interviewers/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
                      "        pm.expect(jsonData.interviewer).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "2fe55e49-a134-4bd9-85e3-7f22fb60d581"
                  }
                }
              ],
              "_postman_id": "4df813fa-0825-4351-9652-80317ea3acfd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/interviewers/{{id_interviewers}}/"
              },
              "response": []
            },
            {
              "name": "/interviewers/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
                      "        pm.expect(jsonData.interviewer).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "9625037f-fb0e-418a-9b1b-3e19b9a98c76"
                  }
                }
              ],
              "_postman_id": "1bc5f7f0-70cf-4940-a28d-4754d03b38d7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"area\": [\n    \"soft_skill\"\n  ],\n  \"is_primary\": true,\n  \"interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"interviewer\": \"{{ID_PERSON}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/interviewers/{{id_interviewers}}/"
              },
              "response": []
            },
            {
              "name": "/interviewers/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Checking for correct title\r",
                      "pm.test(\"Verify that title of variables are correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
                      "        pm.expect(jsonData.interviewer).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "ecf83c0f-c886-4f32-aac9-7bf53dabdb39"
                  }
                }
              ],
              "_postman_id": "c85150e8-954c-4415-ab2c-5c5c81f8c3d7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"area\": [\n    \"soft_skill\"\n  ],\n  \"is_primary\": true,\n  \"interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"interviewer\": \"{{ID_PERSON}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/interviewers/{{id_interviewers}}/"
              },
              "response": []
            },
            {
              "name": "/interviewers/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "d31c33ed-4686-409b-aa69-34a312e3f6e0"
                  }
                }
              ],
              "_postman_id": "1dcd99da-6c68-4cb2-9bde-d19850cac5d7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/interviewers/{{id_interviewers}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "b91d3d74-a030-41b7-b700-af5d4548af9f",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "922c7a9c-9038-48c2-8933-a23a75e78b68"
    },
    {
      "name": "Cities_auto",
      "item": [
        {
          "name": "/cities/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Responce is JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "177091eb-04a9-4737-93e4-73e410f68424"
              }
            }
          ],
          "_postman_id": "6bcd5736-04bd-4797-9e03-d137d8b38622",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/cities/"
          },
          "response": []
        },
        {
          "name": "/cities/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"id_city\", jsonData.id);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "d57f80d6-333b-4d7f-b837-0c3697c4acae"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_cities\", \"title\"+rnd);\r",
                  "\r",
                  "// Get /country/ for getting id_country\r",
                  "//postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");"
                ],
                "type": "text/javascript",
                "id": "d341503d-872e-4c0b-bddf-767e4f3e41a6"
              }
            }
          ],
          "_postman_id": "d2607e1e-b924-48a0-9f9c-b3d41f299227",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_cities}}\",\n  \"country\": \"{{ID_COUNTRY}}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/cities/"
          },
          "response": []
        },
        {
          "name": "/cities/{id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Responce is JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Verify that title_cities is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_cities\"));\r",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "0c9234c8-605b-401c-a685-0badb31b736d"
              }
            }
          ],
          "_postman_id": "d49f8484-d223-4d69-82ec-53d3841defee",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/cities/{{id_city}}/"
          },
          "response": []
        },
        {
          "name": "/cities/{id}/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_cities\", \"title\"+rnd);\r",
                  "\r",
                  "// Get /country/ for getting id_country\r",
                  "// postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");"
                ],
                "type": "text/javascript",
                "id": "28ceefcc-5c1b-44be-ba70-74eb3a01ff27"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Responce is JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Verify that title_cities is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_cities\"));\r",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
                  "        });\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "1336df05-2e8e-497b-85b2-baa4bd3e94d1"
              }
            }
          ],
          "_postman_id": "7201a0d7-d953-4f60-a2cb-32b66e247a41",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_cities}}\",\n  \"country\": \"{{ID_COUNTRY}}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/cities/{{id_city}}/"
          },
          "response": []
        },
        {
          "name": "/cities/{id}/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_cities\", \"title\"+rnd);\r",
                  "\r",
                  "// Get /country/ for getting id_country\r",
                  "// postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");"
                ],
                "type": "text/javascript",
                "id": "e5515fe0-9b94-4860-a112-1843b296b943"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Responce is JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Verify that title_cities is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_cities\"));\r",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "cc3c311a-8d4e-4ccf-a75c-a8b1552f7455"
              }
            }
          ],
          "_postman_id": "a987a2e9-01e6-4df2-9cef-bb7cc9630ec5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_cities}}\",\n  \"country\": \"{{ID_COUNTRY}}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/cities/{{id_city}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "d8d477f0-70a8-4ee4-be05-97c88e6bbe48"
    },
    {
      "name": "Clients_auto",
      "item": [
        {
          "name": "/clients/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking \r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Responce is JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "064fd368-87b9-4eb3-b9f4-4f1294fcda57"
              }
            }
          ],
          "_postman_id": "70b1a336-fb19-44ad-852a-6673a78e83b4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/clients/"
          },
          "response": []
        },
        {
          "name": "/clients/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// random for clients title",
                  "var rnd = Math.floor((Math.random() * 10000) + 1);",
                  "postman.setEnvironmentVariable(\"title_client\", \"title\"+rnd);",
                  "",
                  "// random for clients short_title",
                  "var rnd = Math.floor((Math.random() * 100) + 1);",
                  "postman.setEnvironmentVariable(\"short_title_client\", \"\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "e379e6f6-6e74-4b1b-b557-951ff338593e"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                  "});",
                  "",
                  "// Set var 'id' ",
                  "pm.test(\"Set variable id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    //console.log('This is jsonData', jsonData.id)",
                  "    pm.environment.set(\"id_client\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "ef002797-f705-4de9-a1e8-e0abb1b93a0f"
              }
            }
          ],
          "_postman_id": "42fe0b56-70ee-4933-b101-a184784e06ce",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_client}}\",\n  \"short_title\": \"{{short_title_client}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/clients/"
          },
          "response": []
        },
        {
          "name": "​/clients​/{id}​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Equality checking",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        //console.log('This is jsonData', jsonData.title)",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_client\"));",
                  "        pm.expect(jsonData.short_title).to.eql(pm.environment.get(\"short_title_client\"));",
                  "        });",
                  ""
                ],
                "type": "text/javascript",
                "id": "542f662e-c1f1-4fc6-8c04-6f1ce341ac4f"
              }
            }
          ],
          "_postman_id": "13ec68e6-b463-4079-88f0-2b4e5e718e4d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/clients/{{id_client}}/"
          },
          "response": []
        },
        {
          "name": "​/clients​/{id}​/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// random for clients title",
                  "var rnd = Math.floor((Math.random() * 10000) + 1);",
                  "postman.setEnvironmentVariable(\"title_client\", \"title\"+rnd);",
                  "",
                  "// random for clients short_title",
                  "var rnd = Math.floor((Math.random() * 100) + 1);",
                  "postman.setEnvironmentVariable(\"short_title_client\", \"\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "02707389-c8ca-46cd-bb6b-84ffd1eb65b6"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking ",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Responce is JSON\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "// Equality checking",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        //console.log('This is jsonData', jsonData.title)",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_client\"));",
                  "        pm.expect(jsonData.short_title).to.eql(pm.environment.get(\"short_title_client\"));",
                  "        });",
                  ""
                ],
                "type": "text/javascript",
                "id": "13b46e95-0a4f-480c-b650-ce29f36eb7af"
              }
            }
          ],
          "_postman_id": "aee447cd-4e4a-4fa5-a2c5-ecaae9649848",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_client}}\",\n  \"short_title\": \"{{short_title_client}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/clients/{{id_client}}/"
          },
          "response": []
        },
        {
          "name": "​/clients​/{id}​/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// random for clients title",
                  "var rnd = Math.floor((Math.random() * 10000) + 1);",
                  "postman.setEnvironmentVariable(\"title_client\", \"title\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "3b1bc961-5531-47bf-b356-7c7b2abfaa02"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "//Status and format checking ",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Responce is JSON\", function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "// Equality checking",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        //console.log('This is jsonData', jsonData.title)",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_client\"));",
                  "        pm.expect(jsonData.short_title).to.eql(pm.environment.get(\"short_title_client\"));",
                  "        });",
                  ""
                ],
                "type": "text/javascript",
                "id": "4facdd45-43b0-4bea-a1b3-bb74c9a96163"
              }
            }
          ],
          "_postman_id": "d8b612a5-6316-461b-91b7-774853905f8c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_client}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/clients/{{id_client}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "4cb89906-9c7b-43ce-9d0c-4071c249dfa1"
    },
    {
      "name": "Common_auto",
      "item": [
        {
          "name": "/common/static-data/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "// Checking responce correctly [DRAFT]",
                  "// pm.test(\"English_level_check\", function () {",
                  "//     var jsonData = pm.response.json();",
                  "//     pm.expect(jsonData.interviews.ENGLISH_LEVEL.id).to.eql(beginner);",
                  "// });"
                ],
                "type": "text/javascript",
                "id": "14c0cf8e-6c52-41c4-851b-08ed3d7a4cfd"
              }
            }
          ],
          "_postman_id": "783ef3b4-fb4e-4eda-a7fb-cce917e17970",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/common/static-data/"
          },
          "response": []
        }
      ],
      "_postman_id": "b2e764d1-820d-4293-a928-d684b4b1e2a0"
    },
    {
      "name": "Countries_auto",
      "item": [
        {
          "name": "/countries/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// //GET id_country",
                  "// pm.test(\"Set variable id\", function () {",
                  "//     var jsonData = pm.response.json();",
                  "//     //console.log('This is jsonData', jsonData.id)",
                  "//     pm.environment.set(\"id_country\", jsonData[0].id);",
                  "// });"
                ],
                "type": "text/javascript",
                "id": "4beebb6f-e6c5-4c2a-822a-e02e48f2bfaf"
              }
            }
          ],
          "_postman_id": "5e6e9c6a-bad5-4569-bdbd-f90df645383e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/countries/"
          },
          "response": []
        },
        {
          "name": "/countries/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_country\", \"title\"+rnd);\r",
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_country_ru\", \"название\"+rnd);\r",
                  "var rnd = Math.floor((Math.random() * 100) - 1);\r",
                  "postman.setEnvironmentVariable(\"short_title_country\", \"\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "d66ea693-244b-4392-a978-3cad358e4b0d"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});\r",
                  "\r",
                  "// Set var 'id' \r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"id_country\", jsonData.id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "7456aeac-ecd5-4d08-8ba1-d8c6e3ab8a0f"
              }
            }
          ],
          "_postman_id": "ccce97ff-587a-4df2-a204-0e5017d9a863",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_country}}\",\n  \"title_ru\": \"{{title_country_ru}}\",\n  \"code\": \"{{short_title_country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/countries/"
          },
          "response": []
        },
        {
          "name": "/countries/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_country\"));\r",
                  "        pm.expect(jsonData.title_ru).to.eql(pm.environment.get(\"title_country_ru\"));\r",
                  "        pm.expect(jsonData.code).to.eql(pm.environment.get(\"short_title_country\"));\r",
                  "        });\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "bb7aa014-a57c-4cb6-830b-1ecc336d447e"
              }
            }
          ],
          "_postman_id": "6bd4996e-d931-4889-84a9-4686683a417c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "{{host}}/countries/{{id_country}}/"
          },
          "response": []
        },
        {
          "name": "/countries/{id}/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_country\", \"title\"+rnd);\r",
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_country_ru\", \"название\"+rnd);\r",
                  "var rnd = Math.floor((Math.random() * 100) - 1);\r",
                  "postman.setEnvironmentVariable(\"short_title_country\", \"\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "72f6f15f-c41f-497b-a2c2-e6116a691b0e"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_country\"));\r",
                  "        pm.expect(jsonData.title_ru).to.eql(pm.environment.get(\"title_country_ru\"));\r",
                  "        pm.expect(jsonData.code).to.eql(pm.environment.get(\"short_title_country\"));\r",
                  "        });\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "23f2308c-e11a-448f-a635-e06874bc5678"
              }
            }
          ],
          "_postman_id": "f7b09243-08d3-4553-8fc9-b5e05b40b17a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_country}}\",\n  \"title_ru\": \"{{title_country_ru}}\",\n  \"code\": \"{{short_title_country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/countries/{{id_country}}/"
          },
          "response": []
        },
        {
          "name": "/countries/{id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_country\"));\r",
                  "        pm.expect(jsonData.title_ru).to.eql(pm.environment.get(\"title_country_ru\"));\r",
                  "        pm.expect(jsonData.code).to.eql(pm.environment.get(\"short_title_country\"));\r",
                  "        });\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "c17fd5c3-2ca7-4912-941d-e2fec88c0a38"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_country\", \"title\"+rnd);\r",
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_country_ru\", \"название\"+rnd);\r",
                  "var rnd = Math.floor((Math.random() * 100) - 1);\r",
                  "postman.setEnvironmentVariable(\"short_title_country\", \"\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "82e27448-f8ae-406d-a6b7-f9ee85cfcd84"
              }
            }
          ],
          "_postman_id": "56467467-d2b5-4acf-8798-2e8b489fd544",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_country}}\",\n  \"title_ru\": \"{{title_country_ru}}\",\n  \"code\": \"{{short_title_country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/countries/{{id_country}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "13c0b14d-0cc9-4ad9-8833-78e12b3a832f"
    },
    {
      "name": "Country-timezones_auto",
      "item": [
        {
          "name": "/country-timezones/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// //GET id_country",
                  "// pm.test(\"Set variable id\", function () {",
                  "//     var jsonData = pm.response.json();",
                  "//     //console.log('This is jsonData', jsonData.id)",
                  "//     pm.environment.set(\"id_country\", jsonData[0].id);",
                  "// });"
                ],
                "type": "text/javascript",
                "id": "bd4b9768-642f-469e-9af9-2c6b8f5ab081"
              }
            }
          ],
          "_postman_id": "4d3b468c-444f-4b45-a357-a1470aa9d99b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/country-timezones/"
          },
          "response": []
        },
        {
          "name": "/country-timezones/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
                  "});",
                  "",
                  "// Set var 'id' ",
                  "pm.test(\"Set variable id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    //console.log('This is jsonData', jsonData.id)",
                  "    pm.environment.set(\"id_time_zone\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "cbd14e2b-af03-447b-8f11-511f07cc9391"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_time_zone\", \"time-zone\"+rnd);\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "7564f95f-2bb1-4294-881b-76ad123d8356"
              }
            }
          ],
          "_postman_id": "928d119c-c4a5-41c2-a012-275352d0eb3f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"{{title_time_zone}}\",\r\n  \"utc_offset\": 0,\r\n  \"utc_dst_offset\": 0,\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/country-timezones/"
          },
          "response": []
        },
        {
          "name": "/country-timezones/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Equality checking",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        //console.log('This is jsonData', jsonData.title)",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_time_zone\"));",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
                  "        });",
                  ""
                ],
                "type": "text/javascript",
                "id": "80db8082-8b61-468b-a82a-83d17464c2dd"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "0f5bf000-66aa-427d-945f-9219792b2fab"
              }
            }
          ],
          "_postman_id": "f314920d-4de3-4fdd-ad94-eae48aed44a5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/country-timezones/{{id_time_zone}}/"
          },
          "response": []
        },
        {
          "name": "/country-timezones/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Equality checking",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        //console.log('This is jsonData', jsonData.title)",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_time_zone\"));",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
                  "        });",
                  ""
                ],
                "type": "text/javascript",
                "id": "5991aa00-2c09-45ca-9681-736a80180aee"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_time_zone\", \"time-zone\"+rnd);\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "e52884e1-a88a-4efc-9cf9-6582a232aad5"
              }
            }
          ],
          "_postman_id": "c1e1d62f-b8b6-4ac3-bbbf-bc5d2581eb85",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"{{title_time_zone}}\",\r\n  \"utc_offset\": 0,\r\n  \"utc_dst_offset\": 0,\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/country-timezones/{{id_time_zone}}/"
          },
          "response": []
        },
        {
          "name": "/country-timezones/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Equality checking",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        //console.log('This is jsonData', jsonData.title)",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_time_zone\"));",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
                  "        });",
                  ""
                ],
                "type": "text/javascript",
                "id": "f525ffe7-d914-4eac-acd6-5ddee6373ceb"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_time_zone\", \"time-zone\"+rnd);\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "id": "5ce97eed-f3d1-4d0c-912c-4ac9c22c2e45"
              }
            }
          ],
          "_postman_id": "3a0a354c-f658-4fca-9576-3a4e7bc817e9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"{{title_time_zone}}\",\r\n  \"utc_offset\": 0,\r\n  \"utc_dst_offset\": 0,\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/country-timezones/{{id_time_zone}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "ac6b18ea-e4cd-484d-ae77-19c30c3a49a6"
    },
    {
      "name": "Lock_auto",
      "item": [
        {
          "name": "/lock/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "//GET id_country",
                  "pm.test(\"Set variable id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    //console.log('This is jsonData', jsonData.id)",
                  "    pm.environment.set(\"id_lock\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "26614db9-a054-411a-8820-aa902414d18a"
              }
            }
          ],
          "_postman_id": "ac6b6b8e-a99b-408b-874b-fe75b57d5e0e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/lock/"
          },
          "response": []
        },
        {
          "name": "/lock/{id}",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
                  "//         var jsonData = pm.response.json();",
                  "//         //console.log('This is jsonData', jsonData.title)",
                  "//         pm.expect(jsonData.key_change_in_progress).to.eql(pm.environment.get(\"key_change_in_progress\"));",
                  "//         });",
                  ""
                ],
                "type": "text/javascript",
                "id": "e6692cdf-477f-4136-b3c8-5e04114a8421"
              }
            }
          ],
          "_postman_id": "b24af511-6cad-4035-828a-3ed66901a262",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key_change_in_progress\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/lock/{{id_lock}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "2805a86f-9151-4386-b401-c59b634c498e"
    },
    {
      "name": "hr-importer_auto",
      "item": [
        {
          "name": "/hr-importer/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "7b99f1c7-2d9e-400d-bc8b-68b70424c4ed"
              }
            }
          ],
          "_postman_id": "4ce7f1c3-0cc5-4b1b-bc89-5c71e0025233",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/hr-importer/"
          },
          "response": []
        },
        {
          "name": "hr-importer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "1f0f00b6-4f7d-4c57-867a-45a7cb779c33"
              }
            }
          ],
          "_postman_id": "411b4163-3a96-4e30-b4c3-3e874b0922a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "generated_json",
                  "type": "file",
                  "src": "NX5sQDJ5J/persons.json"
                }
              ],
              "options": {
                "formdata": {}
              }
            },
            "url": {
              "raw": "{{host}}/hr-importer/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "hr-importer",
                ""
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "79c51621-81f9-47a1-a65f-6fd641ec69ce"
    },
    {
      "name": "Persons_auto",
      "item": [
        {
          "name": "persons_auto",
          "item": [
            {
              "name": "/persons/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// //GET id_person\r",
                      "// pm.test(\"Set variable id\", function () {\r",
                      "//     var jsonData = pm.response.json();\r",
                      "//     //console.log('This is jsonData', jsonData.id)\r",
                      "//     pm.environment.set(\"id_person\", jsonData.results[0].id);\r",
                      "// });"
                    ],
                    "type": "text/javascript",
                    "id": "42667d3c-d0fe-4b0e-b2e0-c236ca2d6591"
                  }
                }
              ],
              "_postman_id": "638e25bc-08c6-49c7-85fe-d914951a0c0c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/persons/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "persons",
                    ""
                  ],
                  "query": [
                    {
                      "key": "first_name",
                      "value": "Rick",
                      "disabled": true
                    },
                    {
                      "key": "middle_name",
                      "value": "Smith",
                      "disabled": true
                    },
                    {
                      "key": "last_name",
                      "value": "HR Last_Name",
                      "disabled": true
                    },
                    {
                      "key": "english_level",
                      "value": "advanced",
                      "disabled": true
                    },
                    {
                      "key": "office_location",
                      "value": "USA",
                      "disabled": true
                    },
                    {
                      "key": "assigned_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "relocation_desire",
                      "value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
                      "disabled": true
                    },
                    {
                      "key": "residence_type",
                      "value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
                      "disabled": true
                    },
                    {
                      "key": "role",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/persons/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9d51412e-60c1-4d61-a3f2-0be9c4bdfaa9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_person\", jsonData.id);\r",
                      "    //pm.globals.set(\"ID_PERSON\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "a8456fee-626a-46e0-840a-0dedb7748891"
                  }
                }
              ],
              "_postman_id": "604c60f6-a4d3-4686-bb4b-fbf831a8f10f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons/"
              },
              "response": []
            },
            {
              "name": "/persons/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
                      "        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
                      "        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
                      "        });\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
                      "        //pm.expect(jsonData.residences[0]).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
                      "        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a64da27a-7792-4e56-b784-88510437bb56"
                  }
                }
              ],
              "_postman_id": "fd1868f3-1af4-49c8-b570-4863859eb242",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons/{{id_person}}"
              },
              "response": []
            },
            {
              "name": "/persons/ {id}/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "c98b66cc-65f2-46d4-95f7-ac713ec47876"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
                      "        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
                      "        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
                      "        });\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
                      "        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
                      "        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3345c053-8513-4bbb-a29d-3a94fee7936f"
                  }
                }
              ],
              "_postman_id": "16373931-fad2-41ba-9aa1-3d8866337a6f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons/{{id_person}}/"
              },
              "response": []
            },
            {
              "name": "/persons/ {id}/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "368f6063-ea61-4fd7-a3d7-fa833fc4bdc2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
                      "        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
                      "        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
                      "        });\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
                      "        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
                      "        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bc72a640-cbc1-4f49-bd5a-678139a31048"
                  }
                }
              ],
              "_postman_id": "5d487b33-3d03-4481-9250-fb51cae8eec1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons/{{id_person}}/"
              },
              "response": []
            },
            {
              "name": "/persons/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "012e7f5c-48a6-4d79-8d11-3b0bca15a549"
                  }
                }
              ],
              "_postman_id": "b773cf11-7aea-4a76-9379-8f8372b38086",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/persons/{{id_person}}/"
              },
              "response": []
            },
            {
              "name": "persons/hrs/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "d19054b2-234c-4d50-8a65-a1c22fc05581"
                  }
                }
              ],
              "_postman_id": "b056cc35-e32b-4604-83b3-b4f7826cf04d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons/hrs/"
              },
              "response": []
            },
            {
              "name": "persons/me/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 404 (Person doesn't have user_model)\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "a013f144-4cb5-4624-968e-ec109b3f9ef5"
                  }
                }
              ],
              "_postman_id": "44dac2d5-af78-4a32-adcf-b7dc96f81ac4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons/me/"
              },
              "response": []
            },
            {
              "name": "persons/me/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "555f702f-2c55-43c4-918f-c3288c3c6a59"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 404, Person doesn't have user_model\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
                      "        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
                      "        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
                      "        });\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
                      "        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
                      "        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "1e852a2a-34e5-4915-9a7b-d0acbf806699"
                  }
                }
              ],
              "_postman_id": "403982f6-40be-4a74-b585-afccc3641cce",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons/me/"
              },
              "response": []
            },
            {
              "name": "persons/me/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 404, Person doesn't have user_model\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
                      "        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
                      "        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
                      "        });\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
                      "        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
                      "        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "b26692d7-5e93-4a81-9cab-bbbfa42af930"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "21fbc564-784a-4625-9d04-318497c3d27e"
                  }
                }
              ],
              "_postman_id": "12d19a4b-6c7f-487c-ba16-0d33711582c0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/api/v2.0/persons/me/"
              },
              "response": []
            },
            {
              "name": "persons/me/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      "pm.test(\"Status code is 404, Person doesn't have user_model\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "8a360ffd-41e4-4f81-91b6-5aa618411a0a"
                  }
                }
              ],
              "_postman_id": "51775358-7f69-4c2e-a0fb-cd64d2aa67c2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/persons/me/"
              },
              "response": []
            }
          ],
          "_postman_id": "161e6907-0ea3-49a0-acf9-641365e61c43",
          "_postman_isSubFolder": true
        },
        {
          "name": "persons-CVS_auto",
          "item": [
            {
              "name": "/persons-cvs/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "958b30d0-c91c-4b3c-a678-62e84fd208d5"
                  }
                }
              ],
              "_postman_id": "e70de842-6f7e-4a63-9cb9-55d0cc22870b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "{{host}}/persons-cvs/"
              },
              "response": []
            },
            {
              "name": "/persons-cvs/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_person_cvs\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "c2653ad1-d15c-42b8-a293-89b0f7d81e76"
                  }
                }
              ],
              "_postman_id": "a1b76c9e-4aa5-4207-b95c-2cd4b3a2e73d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "cv_type",
                      "value": "akvelon",
                      "type": "text"
                    },
                    {
                      "key": "is_current",
                      "value": "true",
                      "type": "text"
                    },
                    {
                      "key": "person",
                      "value": "{{ID_PERSON}}",
                      "type": "text"
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/C:/Users/Рушат/Desktop/1_vdh5SWbgqYu4QNgtovBt2A.png"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{host}}/persons-cvs/"
              },
              "response": []
            },
            {
              "name": "/persons-cvs/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "091de2c4-1d49-4923-bb3e-bfc9ab8be9fb"
                  }
                }
              ],
              "_postman_id": "8d57d188-0b38-4ee7-b2e1-bdaa980e362d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons-cvs/{{id_person_cvs}}/"
              },
              "response": []
            },
            {
              "name": "/persons-cvs/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "46e91298-ae6c-4f5e-8ca1-cf675a788884"
                  }
                }
              ],
              "_postman_id": "b84e275c-4772-42a1-a797-6a483c6ecbd2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "cv_type",
                      "value": "akvelon",
                      "type": "text"
                    },
                    {
                      "key": "is_current",
                      "value": "true",
                      "type": "text"
                    },
                    {
                      "key": "person",
                      "value": "{{ID_PERSON}}",
                      "type": "text"
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/C:/Users/Рушат/Desktop/1_vdh5SWbgqYu4QNgtovBt2A.jpg",
                      "disabled": true
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{host}}/persons-cvs/{{id_person_cvs}}/"
              },
              "response": []
            },
            {
              "name": "/persons-cvs/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d8ccf97d-1ce6-4b70-8e22-8e7c97607c0f"
                  }
                }
              ],
              "_postman_id": "bdb8ae6e-1720-4ca4-889c-7185c1d2779f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "cv_type",
                      "value": "akvelon",
                      "type": "text"
                    },
                    {
                      "key": "is_current",
                      "value": "true",
                      "type": "text"
                    },
                    {
                      "key": "person",
                      "value": "{{ID_PERSON}}",
                      "type": "text"
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/C:/Users/Рушат/Desktop/1_vdh5SWbgqYu4QNgtovBt2A.png",
                      "disabled": true
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{host}}/persons-cvs/{{id_person_cvs}}/"
              },
              "response": []
            },
            {
              "name": "/persons-cvs/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "343e3326-3bd3-452d-b77d-ec4c85902ccc"
                  }
                }
              ],
              "_postman_id": "7167ff0e-93c3-46b3-b4e7-0acbb8dba00c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{host}}/persons-cvs/{{id_person_cvs}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "1fdea2c3-8ab9-43b6-8455-20d0d250af07",
          "_postman_isSubFolder": true
        },
        {
          "name": "persons-skills_auto",
          "item": [
            {
              "name": "​/persons-skills​/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "69656446-50d0-49b9-a8d9-83ae7f1c42aa"
                  }
                }
              ],
              "_postman_id": "05fb5d26-a1f4-4c41-beb3-20c3f3147ad8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons-skills/"
              },
              "response": []
            },
            {
              "name": "​/persons-skills​/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_person_skills\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "ca300481-636e-4528-8a0a-12c7c9e959e0"
                  }
                }
              ],
              "_postman_id": "a03298ef-ebca-46ab-9f7b-04702d0f88e5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"grade\": \"senior\",\r\n  \"is_primary\": true,\r\n  \"is_confirmed\": true,\r\n  \"person\": \"{{ID_PERSON}}\",\r\n  \"skill\": \"{{ID_SKILLS}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons-skills/"
              },
              "response": []
            },
            {
              "name": "​/persons-skills​/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cb950c62-fae0-4db8-ad4f-8fab4b1f8b66"
                  }
                }
              ],
              "_postman_id": "59c087d1-3222-4320-a100-1717dd038b0d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons-skills/{{id_person_skills}}/"
              },
              "response": []
            },
            {
              "name": "​/persons-skills​/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "030c1ae0-f3d4-4fa2-9cec-da5aee3a912b"
                  }
                }
              ],
              "_postman_id": "81b06163-8838-4994-8116-a7afe30cc89e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"grade\": \"senior\",\r\n  \"is_primary\": true,\r\n  \"is_confirmed\": true,\r\n  \"person\": \"{{ID_PERSON}}\",\r\n  \"skill\": \"{{ID_SKILLS}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons-skills/{{id_person_skills}}/"
              },
              "response": []
            },
            {
              "name": "​/persons-skills​/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        });\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cdb1ffea-ae42-46ee-a3a4-2659473b64c6"
                  }
                }
              ],
              "_postman_id": "c98fa78b-665c-4a83-9347-2204952bcaaf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"grade\": \"senior\",\r\n  \"is_primary\": true,\r\n  \"is_confirmed\": true,\r\n  \"person\": \"{{ID_PERSON}}\",\r\n  \"skill\": \"{{ID_SKILLS}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons-skills/{{id_person_skills}}/"
              },
              "response": []
            },
            {
              "name": "​/persons-skills​/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "b878551c-94b5-4bc1-ae57-73b4befef106"
                  }
                }
              ],
              "_postman_id": "850a14bd-909e-4495-a119-b5e5b9b3977a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/persons-skills/{{id_person_skills}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "04ac991f-283f-459f-9e22-dbfd34f53b7c",
          "_postman_isSubFolder": true
        },
        {
          "name": "persons-work-histories_auto",
          "item": [
            {
              "name": "/persons-work-histories/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "844a1f1a-7376-4fe9-9d02-02bede133e32"
                  }
                }
              ],
              "_postman_id": "ad474b82-8ddc-4390-bda8-dee43688f4f5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons-work-histories/"
              },
              "response": []
            },
            {
              "name": "/persons-work-histories/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_person_work_hostory\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "843137b8-31f5-4a59-84e6-c5e3c8656854"
                  }
                }
              ],
              "_postman_id": "c4745c94-3d90-4ec8-b3d3-5a8528a1cd5f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"start_work_date\": \"2021-10-18\",\r\n  \"end_work_date\": \"2021-10-18\",\r\n  \"rejection_reason\": \"Test-reject\",\r\n  \"outcome_comment\": \"Test-comment\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons-work-histories/"
              },
              "response": []
            },
            {
              "name": "/persons-work-histories/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "e60d0bca-51b0-4420-b15a-03f3b3cdffa8"
                  }
                }
              ],
              "_postman_id": "bdce5a05-f0b2-4d9b-a8ae-e90cf9024701",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/"
              },
              "response": []
            },
            {
              "name": "/persons-work-histories/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "da69e173-a40d-4974-9327-fd0199247248"
                  }
                }
              ],
              "_postman_id": "a312605d-3a39-4792-a384-75cfe93c0983",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"start_work_date\": \"2021-10-18\",\r\n  \"end_work_date\": \"2021-10-18\",\r\n  \"rejection_reason\": \"Test-reject\",\r\n  \"outcome_comment\": \"Test-comment\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/"
              },
              "response": []
            },
            {
              "name": "/persons-work-histories/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "5aa717bd-896b-4a49-9bb1-58659a0b49c3"
                  }
                }
              ],
              "_postman_id": "6d51ef74-1f53-4297-a491-f8261da6f4bd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"start_work_date\": \"2021-10-18\",\r\n  \"end_work_date\": \"2021-10-18\",\r\n  \"rejection_reason\": \"Test-reject\",\r\n  \"outcome_comment\": \"Test-comment\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/"
              },
              "response": []
            },
            {
              "name": "/persons-work-histories/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "0aa46278-aa9a-43ad-8f38-87770a55e7f5"
                  }
                }
              ],
              "_postman_id": "2e521117-5c24-465b-9f0c-ffcf44cfe969",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "2e4f0e2e-fb1b-4595-ad2a-4e189833f925",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "4e1abb86-a6a0-459e-8afb-5c15491cacb1"
    },
    {
      "name": "Roles_auto",
      "item": [
        {
          "name": "​/roles​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "57875f98-b7f6-4fb2-b6d9-39d582849a43"
              }
            }
          ],
          "_postman_id": "171f80c6-3109-49c4-a07f-fca6f2d70f57",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/roles/"
          },
          "response": []
        },
        {
          "name": "/roles/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_role\", \"role\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "0880a817-ebd6-486f-9156-6613845873c1"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});\r",
                  "\r",
                  "// Set var 'id' \r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"id_role\", jsonData.id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "bcf8b8e8-958a-4e1c-b57c-aa3b2b6b5ced"
              }
            }
          ],
          "_postman_id": "93c97039-0ca5-4f90-b5e6-0bfb8eb51f76",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"{{title_role}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/roles/"
          },
          "response": []
        },
        {
          "name": "​/roles​/{id}​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_role\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "7369b983-93d1-40ff-ada3-e229fb976caa"
              }
            }
          ],
          "_postman_id": "bba2e867-5227-4708-9b2e-196bf8a1270f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/roles/{{id_role}}"
          },
          "response": []
        },
        {
          "name": "​/roles​/{id}​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_role\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "94d194f6-adc2-4ee3-91e0-b2efbc78c444"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_role\", \"role\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "c912f599-1227-46db-95ac-bde1668f3f2c"
              }
            }
          ],
          "_postman_id": "c2cbf40e-aecc-4aa3-bee2-dedc36404cbc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"{{title_role}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/roles/{{id_role}}/"
          },
          "response": []
        },
        {
          "name": "​/roles​/{id}​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_role\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "bd35f74f-552c-44f1-8a13-7d02c17aa3f8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_role\", \"role\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "768b6059-156c-4767-872a-440831733c38"
              }
            }
          ],
          "_postman_id": "57210739-1d01-4d96-bca8-8421434517f5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"{{title_role}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/roles/{{id_role}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "be7b635b-bb25-4eb3-b8be-ee44ab2034ec"
    },
    {
      "name": "Skills_auto",
      "item": [
        {
          "name": "/skills/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "cfdb3069-4840-4022-b5e2-e4e8aa242638"
              }
            }
          ],
          "_postman_id": "1c3fbd7c-1fd3-449a-b383-fbb4d63d7440",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/skills/"
          },
          "response": []
        },
        {
          "name": "/skills/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_skill\", \"skill\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "73199fd0-81e5-4b00-96f9-eb55a0e5e903"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});\r",
                  "\r",
                  "// Set var 'id' \r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"id_skill\", jsonData.id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "9c6852dd-d152-4340-bbb1-88c906f058ea"
              }
            }
          ],
          "_postman_id": "b202e8ac-da5b-4e4e-a18c-8fe39913fe3c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_skill}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/skills/"
          },
          "response": []
        },
        {
          "name": "​/skills​/{id}​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_skill\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "c1fc15c9-fbe8-4e5f-bcd0-f6e1f00092a8"
              }
            }
          ],
          "_postman_id": "e5bb9cec-aa38-4e74-a85f-93cbd0a83b61",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/skills/{{id_skill}}/"
          },
          "response": []
        },
        {
          "name": "​/skills​/{id}​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_skill\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "fe6a489f-f870-44d1-9994-c9832e4978a3"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_skill\", \"skill\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "d70c0b85-358a-454c-bca3-c7db644b710a"
              }
            }
          ],
          "_postman_id": "95e3d0c0-031e-4bfc-8386-7bb63488f272",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_skill}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/skills/{{id_skill}}/"
          },
          "response": []
        },
        {
          "name": "​/skills​/{id}​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_skill\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "9f2d6e13-eb91-43a7-8253-6b198d47e1ef"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_skill\", \"skill\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "059b9059-d0ac-442f-a564-149d8c6b1821"
              }
            }
          ],
          "_postman_id": "02440f5f-34de-438d-b446-dd0a6df41580",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_skill}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/skills/{{id_skill}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "6cf1a946-4e68-4d1d-8dd4-c02d4044a751"
    },
    {
      "name": "Transliteration_auto",
      "item": [
        {
          "name": "​/transliteration​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "c863fd8c-af3b-4b31-8e7b-5ee06b484ff6"
              }
            }
          ],
          "_postman_id": "af9bc6b9-0456-461e-9349-029fd7bc1765",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "value": "Рушат",
                  "type": "text"
                },
                {
                  "key": "input_text",
                  "value": "Рушат",
                  "type": "text"
                },
                {
                  "key": "output_text",
                  "value": "",
                  "type": "text",
                  "disabled": true
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "{{host}}/transliteration/"
          },
          "response": []
        }
      ],
      "_postman_id": "c09156ab-f249-4e0a-a422-7a109efcda82"
    },
    {
      "name": "projects_auto",
      "item": [
        {
          "name": "/projects/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "a7e719ec-2c35-499d-9892-468c1e7aaced"
              }
            }
          ],
          "_postman_id": "956ed6df-e099-4b0d-b379-e9999905661e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/projects/",
              "host": [
                "{{host}}"
              ],
              "path": [
                "projects",
                ""
              ],
              "query": [
                {
                  "key": "status",
                  "value": "finished",
                  "disabled": true
                },
                {
                  "key": "page_filter",
                  "value": "positions_history",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "/projects/",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_project\", \"project\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "4bddc7b3-77a5-4b66-a5c8-14695a442cc2"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});\r",
                  "\r",
                  "// Set var 'id' \r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"id_project\", jsonData.id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "e02324ef-8439-4993-86f5-ae5095202354"
              }
            }
          ],
          "_postman_id": "183ffed3-c0df-4862-8bbd-4af0120a759b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_project}}\",\n  \"client\": \"{{ID_CLIENT}}\",\n  \"status\": \"rejected\",\n  \"rejection_reason\": \"not_found_candidates\",\n  \"finish_reason\": \"test-finish-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/projects/"
          },
          "response": []
        },
        {
          "name": "/projects/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_project\"));\r",
                  "        pm.expect(jsonData.client.id).to.eql(pm.globals.get(\"ID_CLIENT\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "fbc9e0c2-1954-46f8-8312-eee8f9eea82c"
              }
            }
          ],
          "_postman_id": "f301ba33-5344-4fc4-bbad-cd8a428e01d9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/projects/{{id_project}}/"
          },
          "response": []
        },
        {
          "name": "/projects/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_project\"));\r",
                  "        pm.expect(jsonData.client).to.eql(pm.globals.get(\"ID_CLIENT\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "67a52e73-073f-4a50-ac16-b0ee4d8bd781"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_project\", \"project\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "052845e7-f266-427a-9eae-eacb94ca47c0"
              }
            }
          ],
          "_postman_id": "97503927-bcf3-4d66-9857-d68ece5c2f55",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_project}}\",\n  \"client\": \"{{ID_CLIENT}}\",\n  \"status\": \"waiting\",\n  \"rejection_reason\": \"not_found_candidates\",\n  \"finish_reason\": \"test-finish-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/projects/{{id_project}}/"
          },
          "response": []
        },
        {
          "name": "/projects/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_project\"));\r",
                  "        pm.expect(jsonData.client).to.eql(pm.globals.get(\"ID_CLIENT\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "4ca229c3-adc3-44ad-9b8d-b09b1681c6c6"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_project\", \"project\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "d8b162b8-44ae-4904-8925-cb75137096cf"
              }
            }
          ],
          "_postman_id": "8fa86327-fbd7-446a-8096-4ca626ba3c49",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{title_project}}\",\n  \"client\": \"{{ID_CLIENT}}\",\n  \"status\": \"waiting\",\n  \"rejection_reason\": \"not_found_candidates\",\n  \"finish_reason\": \"test-finish-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/projects/{{id_project}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "71b1ab0c-278c-4de2-9d5c-75663283a947"
    },
    {
      "name": "residence_auto",
      "item": [
        {
          "name": "/residence/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "id": "ee6b9b53-0e67-4b97-a1c3-9dd0063e48ce"
              }
            }
          ],
          "_postman_id": "f7a159b0-ea60-4925-a9af-19008ac56584",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/residences/"
          },
          "response": []
        },
        {
          "name": "/residence/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});\r",
                  "//GET id_residence \r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"id_residence\", jsonData.id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "8d4343bd-2a56-4259-a98b-c4d29609a7c2"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_residence\", \"test_residence\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "41326d07-e3a9-49ff-9c20-062cf7b4582a"
              }
            }
          ],
          "_postman_id": "26c91c3f-92dd-4084-ae08-410720e9ceb4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"residence_type\": \"{{title_residence}}\",\n  \"country\": \"{{ID_COUNTRY}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/residences/"
          },
          "response": []
        },
        {
          "name": "/residence/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.residence_type).to.eql(pm.environment.get(\"title_residence\"));\r",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "1e725abd-e6a2-47e1-8ba8-99290ba0eb82"
              }
            }
          ],
          "_postman_id": "00bf32a7-1fe4-4789-bf12-9664e68cdf19",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/residences/{{id_residence}}/"
          },
          "response": []
        },
        {
          "name": "/residence/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.residence_type).to.eql(pm.environment.get(\"title_residence\"));\r",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "6f208550-a5c2-4d57-89a7-8f15304f3529"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_residence\", \"test_residence\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "6feb1eef-1f13-4df6-bbfa-d3baa60fefb3"
              }
            }
          ],
          "_postman_id": "28a0b361-5bdb-4fb3-a411-d6e31c7569c2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"residence_type\": \"{{title_residence}}\",\n  \"country\": \"{{ID_COUNTRY}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/residences/{{id_residence}}/"
          },
          "response": []
        },
        {
          "name": "/residence/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Equality checking\r",
                  "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        //console.log('This is jsonData', jsonData.title)\r",
                  "        pm.expect(jsonData.residence_type).to.eql(pm.environment.get(\"title_residence\"));\r",
                  "        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
                  "        });"
                ],
                "type": "text/javascript",
                "id": "ddd69b2d-46e5-4497-8bf1-8ee50aa72906"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                  "postman.setEnvironmentVariable(\"title_residence\", \"test_residence\"+rnd);"
                ],
                "type": "text/javascript",
                "id": "39cb0d55-c536-4ce6-9d67-a04fa8499084"
              }
            }
          ],
          "_postman_id": "b05dd5f0-ebb8-47b4-8cef-73634f53c6f8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"residence_type\": \"{{title_residence}}\",\n  \"country\": \"{{ID_COUNTRY}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/residences/{{id_residence}}/"
          },
          "response": []
        },
        {
          "name": "/residence/ {id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "37e8c2ba-4bd6-4126-a0c5-d38107632619"
              }
            }
          ],
          "_postman_id": "917a05c4-eb88-4b74-9639-9f5c75936036",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [],
            "url": "{{host}}/residences/{{id_residence}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "88b1d2e4-6786-4b9e-bc15-0e49db2b4f30"
    },
    {
      "name": "Positions",
      "item": [
        {
          "name": "positions_auto",
          "item": [
            {
              "name": "/positions/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "a55f95e7-e605-4e7e-8fe9-56027374969c"
                  }
                }
              ],
              "_postman_id": "608a0a68-4284-45d0-9bdd-8800bd1fc7f3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": {
                  "raw": "{{host}}/positions/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "positions",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page_filter",
                      "value": "mine",
                      "disabled": true
                    },
                    {
                      "key": "title",
                      "value": "Apple project",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "rejected",
                      "disabled": true
                    },
                    {
                      "key": "position_type",
                      "value": "bench",
                      "disabled": true
                    },
                    {
                      "key": "ordering",
                      "value": "created_at",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "project",
                      "value": "Ap",
                      "disabled": true
                    },
                    {
                      "key": "position_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "job_type",
                      "value": "part_time",
                      "disabled": true
                    },
                    {
                      "key": "location",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/positions/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_position\", \"test_position\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "732ac97f-8f71-4c7b-af9b-b3138bb6952f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "//GET id_residence \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_position\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "2159d206-b4bf-447e-967a-ec89dc958a47"
                  }
                }
              ],
              "_postman_id": "0715e824-4663-4128-a1c1-bf2ec9fcdd74",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"project\": \"{{ID_PROJECT}}\",\n  \"title\": \"{{title_position}}\",\n  \"status\": \"open\",\n  \"position_type\": \"project\",\n  \"priority\": \"low\",\n  \"engagement_type\": \"new_business\",\n  \"comment\": \"test-comment\",\n  \"time_zone\": \"moscow\",\n  \"role\": \"{{ID_ROLE}}\",\n  \"job_type\": \"full_time\",\n  \"hours_per_day\": 8,\n  \"job_description\": \"test-description\",\n  \"rejection_reason\": \"test-rejection-reason\",\n  \"outcome_comment\": \"test-comment\",\n  \"position_hrs\": [\n    \"{{ID_PERSON}}\"\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/positions/"
              },
              "response": []
            },
            {
              "name": "/positions/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position\"));\r",
                      "        pm.expect(jsonData.project.id).to.eql(pm.globals.get(\"ID_PROJECT\"));\r",
                      "        //not implemented pm.expect(jsonData.project.role).to.eql(pm.globals.get(\"ID_ROLE\"));\r",
                      "        pm.expect(jsonData.position_hrs[0].id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "dd5c3866-dfb3-4833-a72e-093c6000099e"
                  }
                }
              ],
              "_postman_id": "01f13c50-9a59-4db6-ab53-d1ae93fe8d2d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/positions/{{id_position}}/"
              },
              "response": []
            },
            {
              "name": "/positions/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position\"));\r",
                      "        pm.expect(jsonData.project).to.eql(pm.globals.get(\"ID_PROJECT\"));\r",
                      "        //not implemented pm.expect(jsonData.project.role).to.eql(pm.globals.get(\"ID_ROLE\"));\r",
                      "        pm.expect(jsonData.position_hrs[0]).to.eql(pm.globals.get(\"ID_PERSON\")); // Why it's without id?\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "01abb924-8baf-4988-b77f-40031c2fefeb"
                  }
                }
              ],
              "_postman_id": "b01ca67d-a5f1-4498-965a-5bf6b0232346",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"project\": \"{{ID_PROJECT}}\",\n  \"title\": \"{{title_position}}\",\n  \"status\": \"open\",\n  \"position_type\": \"project\",\n  \"priority\": \"low\",\n  \"engagement_type\": \"new_business\",\n  \"comment\": \"test-comment\",\n  \"time_zone\": \"moscow\",\n  \"role\": \"{{ID_ROLE}}\",\n  \"job_type\": \"full_time\",\n  \"hours_per_day\": 8,\n  \"job_description\": \"test-description\",\n  \"rejection_reason\": \"test-rejection-reason\",\n  \"outcome_comment\": \"test-comment\",\n  \"position_hrs\": [\n    \"{{ID_PERSON}}\"\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/positions/{{id_position}}/"
              },
              "response": []
            },
            {
              "name": "/positions/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position\"));\r",
                      "        pm.expect(jsonData.project).to.eql(pm.globals.get(\"ID_PROJECT\"));\r",
                      "        //not implemented pm.expect(jsonData.project.role).to.eql(pm.globals.get(\"ID_ROLE\"));\r",
                      "        pm.expect(jsonData.position_hrs[0]).to.eql(pm.globals.get(\"ID_PERSON\")); // Why it's without id?\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "c1456819-81bc-471e-8f00-1957d674521a"
                  }
                }
              ],
              "_postman_id": "f5e156e0-c548-4c64-bf01-bfeb0150468f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"project\": \"{{ID_PROJECT}}\",\n  \"title\": \"{{title_position}}\",\n  \"status\": \"open\",\n  \"position_type\": \"project\",\n  \"priority\": \"low\",\n  \"engagement_type\": \"new_business\",\n  \"comment\": \"test-comment\",\n  \"time_zone\": \"moscow\",\n  \"role\": \"{{ID_ROLE}}\",\n  \"job_type\": \"full_time\",\n  \"hours_per_day\": 8,\n  \"job_description\": \"test-description\",\n  \"rejection_reason\": \"test-rejection-reason\",\n  \"outcome_comment\": \"test-comment\",\n  \"position_hrs\": [\n    \"{{ID_PERSON}}\"\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/positions/{{id_position}}/"
              },
              "response": []
            },
            {
              "name": "/positions/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "5252430b-fe3d-4ea6-abdc-9fbdbe2b298a"
                  }
                }
              ],
              "_postman_id": "9beb6dfc-f7be-40ad-b15f-3c1bec88adb9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/positions/{{id_position}}/"
              },
              "response": []
            },
            {
              "name": "/positions/ {id}/ history",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "9b2628af-69e7-4ad7-be64-b1b42cf1c3a2"
                  }
                }
              ],
              "_postman_id": "33fddd57-f3a7-4e51-8d09-f56fd5266f26",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/positions/{{ID_POSITION}}/history/"
              },
              "response": []
            },
            {
              "name": "/positions/ {id}/ candidates",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "f75b60f3-110e-480f-b988-b0f21f3cc0a1"
                  }
                }
              ],
              "_postman_id": "de8d7f36-26ed-4e81-8cec-cf499321f408",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/positions/{{ID_POSITION}}/candidates/"
              },
              "response": []
            },
            {
              "name": "/positions/ {id}/ staffed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "27d7f900-2bc4-4dfe-b357-c649cd10bb11"
                  }
                }
              ],
              "_postman_id": "a72b4b91-7eda-46bb-bb2b-f583ef473319",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/positions/{{ID_POSITION}}/staffed/"
              },
              "response": []
            }
          ],
          "_postman_id": "76125cf8-cdc0-4a27-bb64-2a8921e4951e",
          "_postman_isSubFolder": true
        },
        {
          "name": "position-location_auto",
          "item": [
            {
              "name": "/position-locations/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "9530660b-2e08-437e-892e-e2735f57c133"
                  }
                }
              ],
              "_postman_id": "e68b73c4-2c5c-4d21-a820-68d33c63d3c6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": {
                  "raw": "{{host}}/position-locations/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "position-locations",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page_filter",
                      "value": "mine",
                      "disabled": true
                    },
                    {
                      "key": "title",
                      "value": "Apple project",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "rejected",
                      "disabled": true
                    },
                    {
                      "key": "position_type",
                      "value": "bench",
                      "disabled": true
                    },
                    {
                      "key": "ordering",
                      "value": "created_at",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "project",
                      "value": "Ap",
                      "disabled": true
                    },
                    {
                      "key": "position_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "job_type",
                      "value": "part_time",
                      "disabled": true
                    },
                    {
                      "key": "location",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/position-location/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_position_location\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "6f9e9bb5-dbb5-48b1-9641-77adc209aea2"
                  }
                }
              ],
              "_postman_id": "7f42e6b1-8632-4c19-8974-5f72761191cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"offshore_kazan\",\n  \"position\": \"{{ID_POSITION}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/position-locations/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "position-locations",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page_filter",
                      "value": "mine",
                      "disabled": true
                    },
                    {
                      "key": "title",
                      "value": "Apple project",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "rejected",
                      "disabled": true
                    },
                    {
                      "key": "position_type",
                      "value": "bench",
                      "disabled": true
                    },
                    {
                      "key": "ordering",
                      "value": "created_at",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "project",
                      "value": "Ap",
                      "disabled": true
                    },
                    {
                      "key": "position_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "job_type",
                      "value": "part_time",
                      "disabled": true
                    },
                    {
                      "key": "location",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/position-locations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "3976043d-749b-419d-8cea-054b0905941b"
                  }
                }
              ],
              "_postman_id": "0d766133-179a-4a10-9a9c-d57739618d17",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": {
                  "raw": "{{host}}/position-locations/{{id_position_location}}/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "position-locations",
                    "{{id_position_location}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page_filter",
                      "value": "mine",
                      "disabled": true
                    },
                    {
                      "key": "title",
                      "value": "Apple project",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "rejected",
                      "disabled": true
                    },
                    {
                      "key": "position_type",
                      "value": "bench",
                      "disabled": true
                    },
                    {
                      "key": "ordering",
                      "value": "created_at",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "project",
                      "value": "Ap",
                      "disabled": true
                    },
                    {
                      "key": "position_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "job_type",
                      "value": "part_time",
                      "disabled": true
                    },
                    {
                      "key": "location",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/position-locations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "ba1437bb-ab9a-4d3d-a92b-783b7ed4c0cc"
                  }
                }
              ],
              "_postman_id": "8817ebca-07d9-4d3c-8cb8-141f8b8856e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"title\": \"offshore_kazan\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/position-locations/{{id_position_location}}/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "position-locations",
                    "{{id_position_location}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page_filter",
                      "value": "mine",
                      "disabled": true
                    },
                    {
                      "key": "title",
                      "value": "Apple project",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "rejected",
                      "disabled": true
                    },
                    {
                      "key": "position_type",
                      "value": "bench",
                      "disabled": true
                    },
                    {
                      "key": "ordering",
                      "value": "created_at",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "project",
                      "value": "Ap",
                      "disabled": true
                    },
                    {
                      "key": "position_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "job_type",
                      "value": "part_time",
                      "disabled": true
                    },
                    {
                      "key": "location",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/position-locations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "421a6984-2858-4e18-903d-87fa64958ed3"
                  }
                }
              ],
              "_postman_id": "81b6b51d-0aab-49c3-b5bc-982a5d78ab6a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"title\": \"offshore_kazan\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/position-locations/{{id_position_location}}/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "position-locations",
                    "{{id_position_location}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page_filter",
                      "value": "mine",
                      "disabled": true
                    },
                    {
                      "key": "title",
                      "value": "Apple project",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "rejected",
                      "disabled": true
                    },
                    {
                      "key": "position_type",
                      "value": "bench",
                      "disabled": true
                    },
                    {
                      "key": "ordering",
                      "value": "created_at",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "project",
                      "value": "Ap",
                      "disabled": true
                    },
                    {
                      "key": "position_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "job_type",
                      "value": "part_time",
                      "disabled": true
                    },
                    {
                      "key": "location",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/position-locations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "2e8aba3b-aea5-4a5d-b5d2-55e699ce682c"
                  }
                }
              ],
              "_postman_id": "1f472d2d-082e-4df8-a7e9-87a57d1f51ee",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/position-locations/{{id_position_location}}/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "position-locations",
                    "{{id_position_location}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page_filter",
                      "value": "mine",
                      "disabled": true
                    },
                    {
                      "key": "title",
                      "value": "Apple project",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "rejected",
                      "disabled": true
                    },
                    {
                      "key": "position_type",
                      "value": "bench",
                      "disabled": true
                    },
                    {
                      "key": "ordering",
                      "value": "created_at",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "project",
                      "value": "Ap",
                      "disabled": true
                    },
                    {
                      "key": "position_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "job_type",
                      "value": "part_time",
                      "disabled": true
                    },
                    {
                      "key": "location",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "dee67c26-6d98-4719-af0f-16dbb0777b07",
          "_postman_isSubFolder": true
        },
        {
          "name": "position-skills_auto",
          "item": [
            {
              "name": "​/position​-skills/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "225fc0bb-e42f-4855-bc6f-e55c0a62437a"
                  }
                }
              ],
              "_postman_id": "9ba2e054-d00e-4315-ae48-a8742d6ee04f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-skills/"
              },
              "response": []
            },
            {
              "name": "​/position​-skills/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_position_skill\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "6f57e054-284f-41d9-8c1a-b1d7f8933f46"
                  }
                }
              ],
              "_postman_id": "c9bc78cd-6362-4299-a2ba-ab556f91daa8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"grade\": \"senior\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-skills/"
              },
              "response": []
            },
            {
              "name": "​/position​-skills/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "bb8bc69a-276a-4b57-bd15-06f87c526592"
                  }
                }
              ],
              "_postman_id": "8a54c612-33e0-4495-8350-d10518281aa5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-skills/{{id_position_skill}}/"
              },
              "response": []
            },
            {
              "name": "​/position​-skills/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "6495413f-7327-4bab-ba2a-5a2637113af7"
                  }
                }
              ],
              "_postman_id": "e47011fc-3ea4-45ca-8c2d-42ccdab19c0f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"grade\": \"senior\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-skills/{{id_position_skill}}/"
              },
              "response": []
            },
            {
              "name": "​/position​-skills/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "f6953265-947a-4eb8-85fd-c48d44ab9037"
                  }
                }
              ],
              "_postman_id": "897e2f51-f307-4da0-983c-0884c3d81e41",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"grade\": \"senior\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-skills/{{id_position_skill}}/"
              },
              "response": []
            },
            {
              "name": "​/position​-skills/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "db9bd29c-675c-4d48-a9c3-341a64070227"
                  }
                }
              ],
              "_postman_id": "7d639cad-f87c-4ee6-8292-142027deb8ae",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-skills/{{id_position_skill}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "f63a8d44-2860-4824-8505-87f633d9e2ef",
          "_postman_isSubFolder": true
        },
        {
          "name": "position-seats_auto",
          "item": [
            {
              "name": "/position-seats/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "4ff3438c-09cd-402f-be38-9f168dd0d8b1"
                  }
                }
              ],
              "_postman_id": "bb225ffa-2f02-4a02-aae5-b3a21c1e8d38",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seats/"
              },
              "response": []
            },
            {
              "name": "/position-seats/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_position_seats\", jsonData.id);\r",
                      "    //pm.globals.set(\"id_PS\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "030d6024-7581-4847-95e7-ded64de40c54"
                  }
                }
              ],
              "_postman_id": "5a008363-a85b-4e22-b6c2-b49c20e84f96",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"billable_status\": \"billable\",\n  \"deadline\": \"2021-10-13\",\n  \"position\": \"{{ID_POSITION}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seats/"
              },
              "response": []
            },
            {
              "name": "/position-seats/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "6652297f-fb26-4a13-af7a-39d1c9f51f7c"
                  }
                }
              ],
              "_postman_id": "978c7429-560f-471f-883d-3f1de9b4cfd1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seats/{{id_position_seats}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "e8d635d9-3476-4630-9fbf-35e76848928a"
                  }
                }
              ],
              "_postman_id": "d479024e-54a3-4897-8c00-70029b4b7f72",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"billable_status\": \"billable\",\r\n  \"deadline\": \"2021-10-13\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seats/{{id_position_seats}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "6cd0cc45-5273-46ff-9ea3-640a3f2ad1db"
                  }
                }
              ],
              "_postman_id": "45ea2c11-9852-488e-8041-94dc0f45be6f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"billable_status\": \"billable\",\r\n  \"deadline\": \"2021-10-13\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seats/{{id_position_seats}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "b83186c2-6e6d-4a18-86ac-a8e3e17a9030"
                  }
                }
              ],
              "_postman_id": "078d29dc-0997-4119-b300-1dbd57b4d73b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-seats/{{id_position_seats}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "0164602d-0fd3-4272-b49b-01b68c5c294c",
          "_postman_isSubFolder": true
        },
        {
          "name": "position-seats-occupations_auto",
          "item": [
            {
              "name": "/position-seats-occupations/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//Status and format checking ",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Responce is JSON\", function () {",
                      "    pm.response.to.be.json;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0376f173-3c69-4d7b-8cdb-ab974e74e9a9"
                  }
                }
              ],
              "_postman_id": "c31ad500-2c9e-4191-9330-8e20f7ccb35b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/"
              },
              "response": []
            },
            {
              "name": "/position-seats-occupations/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "//GET id_pso\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_pso\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "afb30afb-e135-4c33-9041-5adaeeb458f6"
                  }
                }
              ],
              "_postman_id": "000a01b4-163f-4527-a530-4957f45b75c1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"person\":\n        \"{{ID_PERSON}}\",\n    \"position_seat\":\n        \"{{ID_PS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/"
              },
              "response": []
            },
            {
              "name": "/position-seats-occupations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.position_seat).to.eql(pm.globals.get(\"ID_PS\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "4b947e90-4fcf-40a0-b857-6f60472afc80"
                  }
                }
              ],
              "_postman_id": "c699a804-234d-4102-bc02-d0ac385f25d5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats-occupations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.position_seat).to.eql(pm.globals.get(\"ID_PS\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "2d292880-ced5-46fe-ba02-fe0a8f27b82b"
                  }
                }
              ],
              "_postman_id": "3c61a012-c7a8-4d48-8ca2-7aec834a14b2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"person\":\r\n        \"{{ID_PERSON}}\",\r\n    \"position_seat\":\r\n        \"{{ID_PS}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats-occupations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
                      "        pm.expect(jsonData.position_seat).to.eql(pm.globals.get(\"ID_PS\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "438f3c2d-4d16-464f-952c-3d48fed20cd7"
                  }
                }
              ],
              "_postman_id": "60c72a92-d537-4eed-958e-327e506f4bf1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"person\":\r\n        \"{{ID_PERSON}}\",\r\n    \"position_seat\":\r\n        \"{{ID_PS}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats-occupations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "1d57435c-1736-4c49-91a6-70e37b8e11da"
                  }
                }
              ],
              "_postman_id": "49c57c76-a8f5-4a4c-a7ab-1f3ed04738fd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/"
              },
              "response": []
            },
            {
              "name": "NEXT /position-seats-occupations/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "//GET id_pso\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_pso\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "27b02f8f-aadf-4d9c-8582-70885a2b13ef"
                  }
                }
              ],
              "_postman_id": "863b7a3c-aae9-496f-9d84-ade826e6a8d0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"person\":\n        \"{{ID_PERSON}}\",\n    \"position_seat\":\n        \"{{ID_PS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/"
              },
              "response": []
            },
            {
              "name": "/{id}/candidate-progress/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "ab157561-ec72-4881-9d2d-936aa170d948"
                  }
                }
              ],
              "_postman_id": "e3a798b8-5a89-43c0-8ffb-3425d5787e8c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/"
              },
              "response": []
            },
            {
              "name": "/{id}/candidate-progress/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "f55c5289-c21b-4e03-9869-91e2bf7eceed"
                  }
                }
              ],
              "_postman_id": "b535bf39-cfd0-4584-9201-8a7a0aaaa09e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transitionId\": \"PASS_SIMPLE_STEP\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/"
              },
              "response": []
            },
            {
              "name": "INTERVIEWER /persons/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//GET id_person\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_person\", jsonData.results[index].id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "da06a713-f93f-43d2-a330-710d03507e9b"
                  }
                }
              ],
              "_postman_id": "c8325ae7-1e48-42e0-8567-6c36575a012f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/persons/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "persons",
                    ""
                  ],
                  "query": [
                    {
                      "key": "first_name",
                      "value": "Rick",
                      "disabled": true
                    },
                    {
                      "key": "middle_name",
                      "value": "Smith",
                      "disabled": true
                    },
                    {
                      "key": "last_name",
                      "value": "HR Last_Name",
                      "disabled": true
                    },
                    {
                      "key": "english_level",
                      "value": "advanced",
                      "disabled": true
                    },
                    {
                      "key": "office_location",
                      "value": "USA",
                      "disabled": true
                    },
                    {
                      "key": "assigned_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "relocation_desire",
                      "value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
                      "disabled": true
                    },
                    {
                      "key": "residence_type",
                      "value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
                      "disabled": true
                    },
                    {
                      "key": "role",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "HR/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-hr-interview/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "60e10056-57ca-4958-83c5-ad5e4f7a90dc"
                  }
                }
              ],
              "_postman_id": "b66b892c-2902-40c5-9729-a93f2a9b92fb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-hr-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "HR/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-hr-interview/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_hr_chart\", \"test-hr-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "4226032a-d621-4470-99c9-54e399c7e4aa"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "//GET id_pso\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_hr_int_chart\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "b306d1e7-b4cb-4b3a-b926-3eb2897bbf30"
                  }
                }
              ],
              "_postman_id": "6889b74a-2526-4c67-9adc-47b4c58ede2d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"date\": \"2021-09-30T10:48:49.302Z\" ,\r\n    \"title\": \"{{title_hr_chart}}\",\r\n    \"knownInterviewers\": [\r\n        {\r\n            \"id\":\"{{id_person}}\"        \r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-hr-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "HR/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-hr-interview/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "f9ba1578-5775-4ac4-9c6d-fe6558af958b"
                  }
                }
              ],
              "_postman_id": "89ba6333-a3ff-4fd7-92ee-1dbfdf81673b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "HR/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-hr-interview/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "b8b8ea9c-35e2-4343-8880-c85ce41f21f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_hr_chart\", \"test-hr-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "6f64969c-55b1-46bb-b2c4-301c77ad6e16"
                  }
                }
              ],
              "_postman_id": "5775d498-65de-4904-a58b-922035d01ca2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"date\": \"2021-09-30T10:48:49.302Z\" ,\r\n    \"title\": \"{{title_hr_chart}}\",\r\n    \"knownInterviewers\": [\r\n        {\r\n            \"id\":\"{{id_person}}\"        \r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "HR/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-hr-interview/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "553b9b16-36fb-4b6b-9683-f646182f8685"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_hr_chart\", \"test-hr-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "1944358c-2c3c-4d61-aa69-ff6cbd6c0d47"
                  }
                }
              ],
              "_postman_id": "6da1b7b8-30ce-4136-9789-6d200e6e2c9e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"date\": \"2021-09-30T10:48:49.302Z\" ,\r\n    \"title\": \"{{title_hr_chart}}\",\r\n    \"knownInterviewers\": [\r\n        {\r\n            \"id\":\"{{id_person}}\"        \r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "HR/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-hr-interview/{id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "4af0c702-b3cf-49ec-b788-39aa4260996a"
                  }
                }
              ],
              "_postman_id": "0e707591-1429-42bf-8c88-b6f4192826f4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "POSITION/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "a153f015-3a62-4c88-b5db-d8c7bf5a2786"
                  }
                }
              ],
              "_postman_id": "32136cc8-1431-4d18-8482-492c0280f28e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-position-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "POSITION/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-hr-interview/",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_position_chart\", \"test-position-int-chartflow\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"type_position_chart\", \"test-type-position-int-chartflow\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"test_position_interviewer\", \"test-interviewer\"+rnd);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "be5a32fe-27af-4319-b1b4-3ae95c69ccd7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "//GET id_pso\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_pos_int_chart\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "19177a50-47b2-480f-8001-2a8c98a500e2"
                  }
                }
              ],
              "_postman_id": "9662d527-5c69-4d34-a036-e9bbbbeca330",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:20:36.268Z\",\r\n  \"title\": \"{{title_position_chart}}\",\r\n  \"typeId\": \"client_interview\",\r\n  \"type\": {\r\n    \"title\": \"{{type_position_chart}}\"\r\n  },\r\n  \"unknownInterviewers\": [\r\n    {\r\n      \"name\": \"{{test_position_interviewer}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-position-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "POSITION/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_chart\"));\r",
                      "        pm.expect(jsonData.unknownInterviewers[0].name).to.eql(pm.environment.get(\"test_position_interviewer\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "ebf6989d-f916-4ace-bd53-383b072a00b8"
                  }
                }
              ],
              "_postman_id": "eaa81ce9-a8a8-4ed5-b03a-bb5ed4509b99",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "POSITION/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_chart\"));\r",
                      "        pm.expect(jsonData.unknownInterviewers[0].name).to.eql(pm.environment.get(\"test_position_interviewer\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "df298449-a2fd-4e83-bee8-82852ecdc33b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_position_chart\", \"test-position-int-chartflow\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"type_position_chart\", \"test-type-position-int-chartflow\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"test_position_interviewer\", \"test-interviewer\"+rnd);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "65ea4bc0-e91d-4c5b-8832-b2161a9de319"
                  }
                }
              ],
              "_postman_id": "3fca6cc7-c1b2-4f98-9433-8ac3974a6a03",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:20:36.268Z\",\r\n  \"title\": \"{{title_position_chart}}\",\r\n  \"typeId\": \"client_interview\",\r\n  \"type\": {\r\n    \"title\": \"{{type_position_chart}}\"\r\n  },\r\n  \"unknownInterviewers\": [\r\n    {\r\n      \"name\": \"{{test_position_interviewer}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "POSITION/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_chart\"));\r",
                      "        pm.expect(jsonData.unknownInterviewers[0].name).to.eql(pm.environment.get(\"test_position_interviewer\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "4bd275dc-5956-4068-bf9e-898cc391b0d0"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_position_chart\", \"test-position-int-chartflow\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"type_position_chart\", \"test-type-position-int-chartflow\"+rnd);\r",
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"test_position_interviewer\", \"test-interviewer\"+rnd);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f30ddae6-f079-4fb5-98e3-21ba58e1aec0"
                  }
                }
              ],
              "_postman_id": "832ce7b3-39e5-49d6-a50c-277b0d9ce988",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:20:36.268Z\",\r\n  \"title\": \"{{title_position_chart}}\",\r\n  \"typeId\": \"client_interview\",\r\n  \"type\": {\r\n    \"title\": \"{{type_position_chart}}\"\r\n  },\r\n  \"unknownInterviewers\": [\r\n    {\r\n      \"name\": \"{{test_position_interviewer}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "POSITION/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/{id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "f27ce01b-7d57-472f-90e2-5d15676aaeec"
                  }
                }
              ],
              "_postman_id": "9396f1a0-1582-4c94-9194-18736d49a030",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TECH/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-tech-interview/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "0a728740-ab7a-459c-84ee-8c8bc097d77a"
                  }
                }
              ],
              "_postman_id": "4c6aaf30-da39-45f8-9cc3-6ea1174f145d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-tech-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "TECH/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/ Copy",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_tech_chart\", \"test-tech-int-chartflow\"+rnd);\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fee0d96f-5c7a-42b7-b13c-cc4b2c4b8f23"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "//GET id_pso\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_tech_int_chart\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "7eb0a3e2-8d05-479c-9b9c-6869d5dd3f9e"
                  }
                }
              ],
              "_postman_id": "09ab696a-aa40-4316-bbc1-d8d4eebcf8f2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:41:14.066Z\",\r\n  \"title\": \"{{title_tech_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-tech-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "TECH/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "1a5e4a33-c0fb-48dd-9186-0ce4db165ba9"
                  }
                }
              ],
              "_postman_id": "9e5927d5-80a9-4b1e-a71f-73ea57732ae1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TECH/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/ {id}/ Copy",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_tech_chart\", \"test-tech-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "c93491e1-0b51-4751-97ef-43ea563e8d79"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "b4321cec-31f4-4d23-a3be-0757e5f2d504"
                  }
                }
              ],
              "_postman_id": "6171ae5d-3d98-4bf5-8f18-d151d55af925",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:41:14.066Z\",\r\n  \"title\": \"{{title_tech_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TECH/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/ {id}/ Copy 2",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_tech_chart\", \"test-tech-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "0bea0096-550e-468b-b986-11d8aaec122b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "c154d72d-1aa5-49bf-a6d3-77b09014eab2"
                  }
                }
              ],
              "_postman_id": "62bc6f11-cc85-45df-8cb7-f606b4dd6d88",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:41:14.066Z\",\r\n  \"title\": \"{{title_tech_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TECH/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-position-interview/ {id}/ Copy 3",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "49a60197-0e8f-4f5d-9479-67e354802327"
                  }
                }
              ],
              "_postman_id": "abf39160-c6a1-4be0-8d6d-08124d887ea7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TEST-ATTEST/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-test-attestation-interview/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "283de68f-9022-4046-a042-235af964f025"
                  }
                }
              ],
              "_postman_id": "34dba811-8a0b-47aa-9af8-e33b82a69b9c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "TEST-ATTEST/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-test-attestation-interview/ Copy",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_test_att_chart\", \"test-attestation-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "5fee18c3-fa9b-4b4b-aec9-46261731c767"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "//GET id_pso\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_test_att_int_chart\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "67cb9660-59ee-42dd-b4ba-f90fbb7b9559"
                  }
                }
              ],
              "_postman_id": "c01b0056-40ba-4732-b818-6578a43de46a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:51:26.000Z\",\r\n  \"title\": \"{{title_test_att_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/"
              },
              "response": []
            },
            {
              "name": "TEST-ATTEST/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-test-attestation-interview/ Copy 3",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_test_att_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "6e97a526-0e07-4901-ab3a-9714a3edcaf6"
                  }
                }
              ],
              "_postman_id": "483cf601-842c-4805-be15-c66c046a3652",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TEST-ATTEST/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-test-attestation-interview/ Copy 4",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_test_att_chart\", \"test-attestation-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "f422758b-ebae-4aa9-b762-7b9b57b1e0ff"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_test_att_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "617f0037-35a3-447c-bc95-32b098d9e449"
                  }
                }
              ],
              "_postman_id": "38eeec78-0e8f-4194-8a74-ad93248fa31b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:51:26.000Z\",\r\n  \"title\": \"{{title_test_att_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TEST-ATTEST/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-test-attestation-interview/ Copy 2",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var rnd = Math.floor((Math.random() * 10000) + 1);\r",
                      "postman.setEnvironmentVariable(\"title_test_att_chart\", \"test-attestation-int-chartflow\"+rnd);"
                    ],
                    "type": "text/javascript",
                    "id": "0dce191c-63dc-404c-8436-04eef9740c85"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_test_att_chart\"));\r",
                      "        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "ccc234f8-d56b-48f1-9737-2bb5d7b75cbf"
                  }
                }
              ],
              "_postman_id": "11148adf-6f33-43de-a102-4315240898a9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"date\": \"2021-10-27T13:51:26.000Z\",\r\n  \"title\": \"{{title_test_att_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "TEST-ATTEST/position-seat-occupations/{position_seat_occupation_pk}/candidate-progress/steps/step-test-attestation-interview/ Copy 5",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "754f92d6-5e7b-4e2b-aee1-80fda56fad0a"
                  }
                }
              ],
              "_postman_id": "ff375911-7435-4f6b-a539-0c700d7313af",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/"
              },
              "response": []
            },
            {
              "name": "OUT /position-seats-occupations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "c19dfb77-0c58-42cc-bb1a-cc1a910df00d"
                  }
                }
              ],
              "_postman_id": "7b63e333-7a40-4791-a844-9c541307fb3f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "0ae3d25a-6895-45a3-b94f-a3bbe275b72d",
          "_postman_isSubFolder": true
        },
        {
          "name": "position-seats-replacements_auto",
          "item": [
            {
              "name": "IN /persons/ Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//GET id_person\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_person\", jsonData.results[index].id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "65aca345-eb2b-47ff-84d1-9fb81b4695b7"
                  }
                }
              ],
              "_postman_id": "46b06e5b-907d-44eb-879c-e922c87ddd54",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/persons/",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "persons",
                    ""
                  ],
                  "query": [
                    {
                      "key": "first_name",
                      "value": "Rick",
                      "disabled": true
                    },
                    {
                      "key": "middle_name",
                      "value": "Smith",
                      "disabled": true
                    },
                    {
                      "key": "last_name",
                      "value": "HR Last_Name",
                      "disabled": true
                    },
                    {
                      "key": "english_level",
                      "value": "advanced",
                      "disabled": true
                    },
                    {
                      "key": "office_location",
                      "value": "USA",
                      "disabled": true
                    },
                    {
                      "key": "assigned_hrs",
                      "value": "",
                      "disabled": true
                    },
                    {
                      "key": "relocation_desire",
                      "value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
                      "disabled": true
                    },
                    {
                      "key": "residence_type",
                      "value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
                      "disabled": true
                    },
                    {
                      "key": "role",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "IN /position-seats-occupations/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "//GET id_pso\r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_pso\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "d0f522ff-5756-433c-b260-1176b33e2003"
                  }
                }
              ],
              "_postman_id": "9da4e960-375b-494f-bd78-120770f2597b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"person\":\n        \"{{id_person}}\",\n    \"position_seat\":\n        \"{{ID_PS}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-occupations/"
              },
              "response": []
            },
            {
              "name": "/position-seats-replacements/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "0d926eba-c096-42f0-af92-cf7578e34157"
                  }
                }
              ],
              "_postman_id": "f1957ed0-c4f0-4760-b328-ad7c5ab4c379",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-replacements/"
              },
              "response": []
            },
            {
              "name": "/position-seats-replacements/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                      "});\r",
                      "\r",
                      "// Set var 'id' \r",
                      "pm.test(\"Set variable id\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    //console.log('This is jsonData', jsonData.id)\r",
                      "    pm.environment.set(\"id_position_seat_replacement\", jsonData.id);\r",
                      "    //pm.globals.set(\"id_PS\", jsonData.id);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "09118a10-fc41-4d34-9704-7182c975ff14"
                  }
                }
              ],
              "_postman_id": "75c2f388-1997-4208-b1a9-1c44f840c2bf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"replacement_type\": \"shadow\",\r\n  \"replacement_start_date\": \"2021-10-25\",\r\n  \"replacement_end_date\": \"2021-10-25\",\r\n  \"old_position_seat_occupation\": \"{{id_pso}}\",\r\n  \"new_position_seat_occupation\": \"{{id_pso}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-replacements/"
              },
              "response": []
            },
            {
              "name": "/position-seats-replacements/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.old_position_seat_occupation).to.eql(pm.environment.get(\"id_pso\"));\r",
                      "        pm.expect(jsonData.new_position_seat_occupation).to.eql(pm.environment.get(\"id_pso\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "aa4a8292-c4ac-4d84-93cf-305029b52443"
                  }
                }
              ],
              "_postman_id": "249d6fd5-bd5d-4691-b672-099ff710db7e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "url": "{{host}}/position-seat-replacements/{{id_position_seat_replacement}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats-replacements/ {id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.old_position_seat_occupation).to.eql(pm.environment.get(\"id_pso\"));\r",
                      "        pm.expect(jsonData.new_position_seat_occupation).to.eql(pm.environment.get(\"id_pso\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "28a685de-a2fb-49d6-9536-87f9142ae229"
                  }
                }
              ],
              "_postman_id": "56c468a2-7223-4dfc-8a1d-0c61c554aa7e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"replacement_type\": \"shadow\",\r\n  \"replacement_start_date\": \"2021-10-25\",\r\n  \"replacement_end_date\": \"2021-10-25\",\r\n  \"old_position_seat_occupation\": \"{{id_pso}}\",\r\n  \"new_position_seat_occupation\": \"{{id_pso}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-replacements/{{id_position_seat_replacement}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats-replacements/ {id}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Equality checking\r",
                      "pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
                      "        var jsonData = pm.response.json();\r",
                      "        //console.log('This is jsonData', jsonData.title)\r",
                      "        pm.expect(jsonData.old_position_seat_occupation).to.eql(pm.environment.get(\"id_pso\"));\r",
                      "        pm.expect(jsonData.new_position_seat_occupation).to.eql(pm.environment.get(\"id_pso\"));\r",
                      "        });"
                    ],
                    "type": "text/javascript",
                    "id": "93bc9f3b-d74f-4c74-93eb-817d7f2937b9"
                  }
                }
              ],
              "_postman_id": "06e07df7-d879-46a1-828c-36afab880fbe",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"replacement_type\": \"shadow\",\r\n  \"replacement_start_date\": \"2021-10-25\",\r\n  \"replacement_end_date\": \"2021-10-25\",\r\n  \"old_position_seat_occupation\": \"{{id_pso}}\",\r\n  \"new_position_seat_occupation\": \"{{id_pso}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{host}}/position-seat-replacements/{{id_position_seat_replacement}}/"
              },
              "response": []
            },
            {
              "name": "/position-seats-replacements/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "b0c7f513-25ff-4974-921d-5e2fc9301693"
                  }
                }
              ],
              "_postman_id": "9e0cdbff-dffd-4835-9124-36a141f56505",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-seat-replacements/{{id_position_seat_replacement}}/"
              },
              "response": []
            },
            {
              "name": "OUT /position-seats-occupations/ {id}/",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "d2fdb5a4-2e5b-4bd0-9410-9f1d75b807a8"
                  }
                }
              ],
              "_postman_id": "aaf714bc-276a-4b10-bc41-9469f202b44d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [],
                "url": "{{host}}/position-seat-occupations/{{id_pso}}/"
              },
              "response": []
            }
          ],
          "_postman_id": "c2aef70d-3fe8-49d7-b411-bacd4a4b9462",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "7a076420-3485-47ed-9928-3950f02572b6"
    },
    {
      "name": "Salary_auto",
      "item": [
        {
          "name": "/salary/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "bc743219-48cf-45a3-a759-2ec82fc17991"
              }
            }
          ],
          "_postman_id": "f0df9bc1-ca73-49ef-a9be-977337d30b05",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/salary/"
          },
          "response": []
        },
        {
          "name": "/salary/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "}); // Why it's not 201?"
                ],
                "type": "text/javascript",
                "id": "0c6d00e2-3fe2-460f-ba1e-3c6e7f0d56d2"
              }
            }
          ],
          "_postman_id": "30dbff95-a38c-431d-bf0a-4b6142597222",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"persons_salary\": [\n    {\n      \"id\": \"{{ID_PERSON}}\",\n      \"salary\": \"test-salary\"\n    }\n  ],\n  \"interviews_salary\": [\n    {\n      \"id\": \"{{ID_PERSON}}\",\n      \"salary\": \"test-interviews-salary\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/salary/"
          },
          "response": []
        },
        {
          "name": "/lock/{id} after seeing salary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript",
                "id": "5eabb89a-9189-44e0-b789-b54541a09f9c"
              }
            }
          ],
          "_postman_id": "de2326a0-03d5-4350-aad5-9b534cba1cfe",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key_change_in_progress\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/lock/{{ID_LOCK}}/"
          },
          "response": []
        }
      ],
      "_postman_id": "d0cdd1b8-b2f0-45fd-b930-30993496c785"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "/users/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"id_user\", jsonData[0].id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "5a655e20-93ec-4112-9273-3ba3471c9f66"
              }
            }
          ],
          "_postman_id": "09a97bff-abae-4fbb-a496-2e025a1b4b34",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/users/"
          },
          "response": []
        },
        {
          "name": "​/users​/change_password​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "c4a47d0a-3154-4890-9b3f-86c87b039441"
              }
            }
          ],
          "_postman_id": "41ecccac-6e04-44ed-92f7-1dc9f90e6a83",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"old_password\": \"P@ssw0rd\",\r\n  \"new_password\": \"P@ssw0rd1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/change_password/"
          },
          "response": []
        },
        {
          "name": "​/users​/invite_link​/create​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "25c689b2-9dc1-4f57-afb5-39fa7281164f"
              }
            }
          ],
          "_postman_id": "7b5ca593-b1e7-47e1-a150-b86f69f52643",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"emails\": [\r\n    \"test.inbox@akvelon.com\"\r\n  ],\r\n  \"role\": \"head\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/invite_link/create/"
          },
          "response": []
        },
        {
          "name": "/users/jwt/create/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
                  "});\r",
                  "//GET id_residence \r",
                  "pm.test(\"Set variable id\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    //console.log('This is jsonData', jsonData.id)\r",
                  "    pm.environment.set(\"refresh_token\", jsonData.refresh);\r",
                  "    pm.environment.set(\"access_token\", jsonData.access);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "cd505ec8-fa09-4305-8208-dc349cbdbb9c"
              }
            }
          ],
          "_postman_id": "6d53b044-5f3c-4ae0-a15f-b2a56130076a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "admin@admin.com",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "P@ssw0rd1",
                  "type": "text"
                },
                {
                  "key": "email",
                  "value": "rushat.kadyrov@akvelon.com",
                  "type": "text",
                  "disabled": true
                },
                {
                  "key": "password",
                  "value": "cinGetline98",
                  "type": "text",
                  "disabled": true
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "{{host}}/users/jwt/create/"
          },
          "response": []
        },
        {
          "name": "/users/jwt/refresh/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "f69a7378-f9b5-440a-9009-4a77f54550d5"
              }
            }
          ],
          "_postman_id": "c6f2443f-b6a5-4c59-95b2-de306adcfa3c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"refresh\": \"{{refresh_token}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/jwt/refresh/"
          },
          "response": []
        },
        {
          "name": "/users/jwt/verify/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "6850f2f1-5eee-4730-b5b6-716c202d6152"
              }
            }
          ],
          "_postman_id": "45dd9be1-84a0-4f0f-a1f3-486e950f5c1d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"token\": \"{{access_token}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/jwt/verify/"
          },
          "response": []
        },
        {
          "name": "/users/me/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "ac679782-ea88-4e82-9d7a-3cde242536d8"
              }
            }
          ],
          "_postman_id": "656d89b1-817b-49b8-92bd-d6791a046461",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{host}}/users/me/"
          },
          "response": []
        },
        {
          "name": "/users/me/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "d47f5002-287e-414d-b20c-242a99d44c83"
              }
            }
          ],
          "_postman_id": "464631b8-2bd5-4e1e-9819-e9630c8f65e7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"date_joined\": \"2021-10-18T14:36:08.691Z\",\n  \"system_role\": \"head\",\n  \"email\": \"admin@admin.com\",\n  \"is_active\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/me/"
          },
          "response": []
        },
        {
          "name": "/users/me/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "ab2d1e1d-12ee-4497-a45a-b34bf9a88858"
              }
            }
          ],
          "_postman_id": "5f77246e-791a-404c-8643-d35ba3ef1e7a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"username\": \"admin\",\r\n  \"date_joined\": \"2021-10-18T14:36:08.691Z\",\r\n  \"system_role\": \"head\",\r\n  \"email\": \"admin@admin.com\",\r\n  \"is_active\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/me/"
          },
          "response": []
        },
        {
          "name": "​/users​/registration​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400, because there is no token\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "3d17bdf6-d308-46e6-a376-3887c6cb429f"
              }
            }
          ],
          "_postman_id": "7e082a93-2a09-4c40-b0f9-7a55da9792a6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"full_name\": \"Rushat Kadyrov\",\r\n  \"password\": \"P@ssw0rd1\",\r\n  \"token\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/registration/"
          },
          "response": []
        },
        {
          "name": "/users/{id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "c41f1e5e-1556-42c8-8096-89e475dc0e45"
              }
            }
          ],
          "_postman_id": "eee7f615-c309-4d83-b63e-5b4cf78a1e09",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "{{host}}/users/{{id_user}}/"
          },
          "response": []
        },
        {
          "name": "/users/{id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400, can't be automated yet\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "a8801417-3a2e-4f1f-b16f-9a62095c5a52"
              }
            }
          ],
          "_postman_id": "4cda8ed1-8aea-42c6-8c09-1617056c38fd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/{{id_user}}/"
          },
          "response": []
        },
        {
          "name": "/users/{id}/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "id": "179506d5-9a1d-4287-a8c9-d882e95e8481"
              }
            }
          ],
          "_postman_id": "403d2d2d-8138-4d56-ab88-78f40b05f395",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"system_role\": \"head\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/users/{{id_user}}/"
          },
          "response": []
        },
        {
          "name": "/password_reset/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "}); // not existing email"
                ],
                "type": "text/javascript",
                "id": "d7cb2c78-1442-4410-82fd-036f5d5158c5"
              }
            }
          ],
          "_postman_id": "15bf0d09-62fb-4bb1-bf54-c08d91d34765",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"user@example.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/password_reset/"
          },
          "response": []
        },
        {
          "name": "​/password_reset​/confirm​/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "}); // not existing email and token"
                ],
                "type": "text/javascript",
                "id": "618b0e8f-dc11-4115-afe2-449733526a3c"
              }
            }
          ],
          "_postman_id": "c36a386a-14e0-4f40-b9eb-245dfbadfdfb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"password\": \"\",\r\n  \"token\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/password_reset/confirm/"
          },
          "response": []
        },
        {
          "name": "​/password_reset​/validate-token/",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "}); // can't be automated yet"
                ],
                "type": "text/javascript",
                "id": "c4e1705c-6be2-4a8e-9491-d0c580459def"
              }
            }
          ],
          "_postman_id": "da7b9509-2f38-49fb-b572-58c7a31633dd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"token\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{host}}/password_reset/validate-token/"
          },
          "response": []
        }
      ],
      "_postman_id": "9bc03773-f7f2-4aab-b45e-8a84871b0171"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": {
      "token": "{{JWT_ACCESS}}"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ],
        "id": "5a200bc2-685a-4ec0-bd62-e95ddbccd43e"
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// pm.test(\"Response time is less than 200ms\", function () {",
          "//     pm.expect(pm.response.responseTime).to.be.below(200);",
          "// });"
        ],
        "id": "bef6bb94-e85b-43d1-b9a0-f54e36db3112"
      }
    }
  ]
}
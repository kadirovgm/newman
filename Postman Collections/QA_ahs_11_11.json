{
	"info": {
		"_postman_id": "645271b1-c212-4799-aa5f-af262df64fba",
		"name": "QA_automation",
		"description": "# Introduction\nAHS project's API automation collection\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setting_variables_auto",
			"item": [
				{
					"name": "/users/jwt/create/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//GET JWT Token\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"JWT_ACCESS\", jsonData.access);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin@admin.com\",\r\n  \"password\": \"P@ssw0rd1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/jwt/create/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/lock/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//GET id_country",
									"pm.test(\"Set variable id\", function () {",
									"    var jsonData = pm.response.json();",
									"    //console.log('This is jsonData', jsonData.id)",
									"    pm.globals.set(\"ID_LOCK\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/lock/",
							"host": [
								"{{host}}"
							],
							"path": [
								"lock",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/lock/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key_change_in_progress\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/lock/{{ID_LOCK}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"lock",
								"{{ID_LOCK}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/persons/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//GET id_person\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_PERSON\", jsonData.results[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								""
							],
							"query": [
								{
									"key": "first_name",
									"value": "Rick",
									"disabled": true
								},
								{
									"key": "middle_name",
									"value": "Smith",
									"disabled": true
								},
								{
									"key": "last_name",
									"value": "HR Last_Name",
									"disabled": true
								},
								{
									"key": "english_level",
									"value": "advanced",
									"disabled": true
								},
								{
									"key": "office_location",
									"value": "USA",
									"disabled": true
								},
								{
									"key": "assigned_hrs",
									"value": "",
									"disabled": true
								},
								{
									"key": "relocation_desire",
									"value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
									"disabled": true
								},
								{
									"key": "residence_type",
									"value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
									"disabled": true
								},
								{
									"key": "role",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//GET id_person\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_PROJECT\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/projects/",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "finished",
									"disabled": true
								},
								{
									"key": "page_filter",
									"value": "positions_history",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/positions/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//GET id_person\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_POSITION\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}/positions/",
							"host": [
								"{{host}}"
							],
							"path": [
								"positions",
								""
							],
							"query": [
								{
									"key": "page_filter",
									"value": "mine",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Apple project",
									"disabled": true
								},
								{
									"key": "status",
									"value": "rejected",
									"disabled": true
								},
								{
									"key": "position_type",
									"value": "bench",
									"disabled": true
								},
								{
									"key": "ordering",
									"value": "created_at",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "project",
									"value": "Ap",
									"disabled": true
								},
								{
									"key": "position_hrs",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_type",
									"value": "part_time",
									"disabled": true
								},
								{
									"key": "location",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/clients/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Responce is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_CLIENT\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/clients/",
							"host": [
								"{{host}}"
							],
							"path": [
								"clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/residence/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//GET id_residence ",
									"pm.test(\"Set variable id\", function () {",
									"    var jsonData = pm.response.json();",
									"    //console.log('This is jsonData', jsonData.id)",
									"    var index = Math.trunc(Math.random()*jsonData.length);",
									"    pm.globals.set(\"ID_RESIDENCE\", jsonData[index].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/residences/",
							"host": [
								"{{host}}"
							],
							"path": [
								"residences",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/countries/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//GET id_country",
									"pm.test(\"Set variable id\", function () {",
									"    var jsonData = pm.response.json();",
									"    //console.log('This is jsonData', jsonData.id)",
									"    var index = Math.trunc(Math.random()*jsonData.length);",
									"    pm.globals.set(\"ID_COUNTRY\", jsonData[index].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/countries/",
							"host": [
								"{{host}}"
							],
							"path": [
								"countries",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/cities/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Responce is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_CITY\", jsonData.results[index].id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/cities/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cities",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/skills/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
									"    pm.globals.set(\"ID_SKILLS\", jsonData.results[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/skills/",
							"host": [
								"{{host}}"
							],
							"path": [
								"skills",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/roles​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    pm.globals.set(\"ID_ROLE\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/roles/",
							"host": [
								"{{host}}"
							],
							"path": [
								"roles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/base-requests/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//GET id_pso\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    pm.globals.set(\"ID_BR\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/base-requests/",
							"host": [
								"{{host}}"
							],
							"path": [
								"base-requests",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/candidates/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Responce is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//GET id_pso",
									"pm.test(\"Set variable id\", function () {",
									"    var jsonData = pm.response.json();",
									"    //console.log('This is jsonData', jsonData.id)",
									"    var index = Math.trunc(Math.random()*jsonData.length);",
									"    pm.globals.set(\"ID_CANDIDATE\", jsonData[index].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/candidates/",
							"host": [
								"{{host}}"
							],
							"path": [
								"candidates",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/tech-interviews​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" //const jsonData = pm.response.json();\r",
									" //const index = Math.trunc(Math.random() * jsonData.response.length);\r",
									" //const item = jsonData.response[index];\r",
									"\r",
									" //pm.collectionVariables.set(\"test-itemId\", item.id);\r",
									"\r",
									"//GET id_person\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    \r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_TECH_INTERVIEW\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/tech-interviews/",
							"host": [
								"{{host}}"
							],
							"path": [
								"tech-interviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/hr-interviews/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" //const jsonData = pm.response.json();\r",
									" //const index = Math.trunc(Math.random() * jsonData.response.length);\r",
									" //const item = jsonData.response[index];\r",
									"\r",
									" //pm.collectionVariables.set(\"test-itemId\", item.id);\r",
									"\r",
									"//GET id_person\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    \r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_HR_INTERVIEW\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/hr-interviews/",
							"host": [
								"{{host}}"
							],
							"path": [
								"hr-interviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/position-remote-type/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" //const jsonData = pm.response.json();\r",
									" //const index = Math.trunc(Math.random() * jsonData.response.length);\r",
									" //const item = jsonData.response[index];\r",
									"\r",
									" //pm.collectionVariables.set(\"test-itemId\", item.id);\r",
									"\r",
									"//GET id_person\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    \r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_POSITION_REMOTE_TYPE\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}/position-remote-types/",
							"host": [
								"{{host}}"
							],
							"path": [
								"position-remote-types",
								""
							],
							"query": [
								{
									"key": "page_filter",
									"value": "mine",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Apple project",
									"disabled": true
								},
								{
									"key": "status",
									"value": "rejected",
									"disabled": true
								},
								{
									"key": "position_type",
									"value": "bench",
									"disabled": true
								},
								{
									"key": "ordering",
									"value": "created_at",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "project",
									"value": "Ap",
									"disabled": true
								},
								{
									"key": "position_hrs",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_type",
									"value": "part_time",
									"disabled": true
								},
								{
									"key": "location",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "position-assigned-offices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" //const jsonData = pm.response.json();\r",
									" //const index = Math.trunc(Math.random() * jsonData.response.length);\r",
									" //const item = jsonData.response[index];\r",
									"\r",
									" //pm.collectionVariables.set(\"test-itemId\", item.id);\r",
									"\r",
									"//GET id_person\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    \r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_POSITION_ASSIGNED_OFFICES\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}/position-assigned-offices/",
							"host": [
								"{{host}}"
							],
							"path": [
								"position-assigned-offices",
								""
							],
							"query": [
								{
									"key": "page_filter",
									"value": "mine",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Apple project",
									"disabled": true
								},
								{
									"key": "status",
									"value": "rejected",
									"disabled": true
								},
								{
									"key": "position_type",
									"value": "bench",
									"disabled": true
								},
								{
									"key": "ordering",
									"value": "created_at",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "project",
									"value": "Ap",
									"disabled": true
								},
								{
									"key": "position_hrs",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_type",
									"value": "part_time",
									"disabled": true
								},
								{
									"key": "location",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/position_countries/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    \r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_POSITION_COUNTRIES\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}/position-countries/",
							"host": [
								"{{host}}"
							],
							"path": [
								"position-countries",
								""
							],
							"query": [
								{
									"key": "page_filter",
									"value": "mine",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Apple project",
									"disabled": true
								},
								{
									"key": "status",
									"value": "rejected",
									"disabled": true
								},
								{
									"key": "position_type",
									"value": "bench",
									"disabled": true
								},
								{
									"key": "ordering",
									"value": "created_at",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "project",
									"value": "Ap",
									"disabled": true
								},
								{
									"key": "position_hrs",
									"value": "",
									"disabled": true
								},
								{
									"key": "job_type",
									"value": "part_time",
									"disabled": true
								},
								{
									"key": "location",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/staff-places/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var index = Math.trunc(Math.random()*jsonData.length);\r",
									"    \r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.globals.set(\"ID_STAFF_PLACES\", jsonData[index].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/staff-places/",
							"host": [
								"{{host}}"
							],
							"path": [
								"staff-places",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Interviews_auto",
			"item": [
				{
					"name": "base-interviews_auto",
					"item": [
						{
							"name": "/base-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status and format checking \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Responce is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"// GET /Persons/ for getting id_peron\r",
											"// postman.setNextRequest(\"4c778f38-d4f5-4a6b-a6a3-cacd7a3e07f4\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/base-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Checking for correct responce code\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_base_interview\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// random base-interview title\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"base_int_test\", \"base_int\"+rnd);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-13T21:01:58.610Z\",\n  \"title\": \"{{base_int_test}}\",\n  \"decision\": \"waiting\",\n  \"summary\": \"string\",\n  \"feedback_status\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"position\": \"{{ID_POSITION}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/base-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-interviews/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that base_interview and person titles are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"base_int_test\"));",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"))",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/base-interviews/{{id_base_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-interviews",
										"{{id_base_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-interviews/{id}/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// random base-interview title",
											"var rnd = Math.floor((Math.random() * 10000) + 1);",
											"postman.setEnvironmentVariable(\"base_int_test\", \"base_int\"+rnd);",
											"",
											"// GET /Persons/ for getting interviewee_id",
											"// postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that base_interview and person titles are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"base_int_test\"));",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"))",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-13T21:01:58.610Z\",\n  \"title\": \"{{base_int_test}}\",\n  \"decision\": \"waiting\",\n  \"summary\": \"string\",\n  \"feedback_status\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"position\": \"{{ID_POSITION}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/base-interviews/{{id_base_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-interviews",
										"{{id_base_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-interviews/{id}/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// random base-interview title",
											"var rnd = Math.floor((Math.random() * 10000) + 1);",
											"postman.setEnvironmentVariable(\"base_int_test\", \"base_int\"+rnd);",
											"",
											"// GET /Persons/ for getting interviewee_id",
											"//postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that base_interview and person titles are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"base_int_test\"));",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"))",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-13T21:01:58.610Z\",\n  \"title\": \"{{base_int_test}}\",\n  \"decision\": \"waiting\",\n  \"summary\": \"string\",\n  \"feedback_status\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"position\": \"{{ID_POSITION}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/base-interviews/{{id_base_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-interviews",
										"{{id_base_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-interviews/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/base-interviews/{{id_base_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-interviews",
										"{{id_base_interview}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "hr-interviews_auto",
					"item": [
						{
							"name": "/hr-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/hr-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// GET /Persons/ for getting interviewee_id",
											"//postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");",
											"",
											"",
											"// GET /residence/ for getting id_residences",
											"//postman.setNextRequest(\"17027039-a8af88de-bf09-4e71-a0d1-931753bcd8ff\");",
											"",
											"// Get /country/ for getting id_country",
											"//postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");",
											"",
											"var rnd = Math.floor((Math.random() * 10000) + 1);",
											"postman.setEnvironmentVariable(\"title_hr_int\", \"hr-int-test\"+rnd);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Checking for correct responce code",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"// Set var 'id' ",
											"pm.test(\"Set variable id\", function () {",
											"    var jsonData = pm.response.json();",
											"    //console.log('This is jsonData', jsonData.id)",
											"    pm.environment.set(\"id_hr_interview\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-25T16:00:48.180Z\",\n  \"title\": \"{{title_hr_int}}\",\n  \"decision\": \"waiting\",\n  \"feedback_status\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"motivation\": \"test-motivation\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"test-english\",\n  \"salary\": \"test-salary\",\n  \"residences\": [\n      \"{{ID_RESIDENCE}}\"\n  ],\n  \"relocation_desires\": [\n    \"{{ID_COUNTRY}}\"\n  ],\n  \"relocation_desire_comment\": \"test-comment\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"summary\": \"test-summary\",\n  \"rejection_reason\": \"test-reject-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/hr-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/hr-interviews​/{id}​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that title of variables are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
											"        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));",
											"        //pm.expect(jsonData.relocation_desires[0].id).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_int\"));",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/hr-interviews/{{id_hr_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviews",
										"{{id_hr_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviews/{id}/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// GET /Persons/ for getting interviewee_id",
											"//postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");",
											"",
											"// GET /residence/ for getting id_residences",
											"//postman.setNextRequest(\"17027039-a8af88de-bf09-4e71-a0d1-931753bcd8ff\");",
											"",
											"// Get /country/ for getting id_country",
											"//postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that title of variables are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
											"        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));",
											"        //pm.expect(jsonData.relocation_desires[0].id).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_int\"));",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-25T16:00:48.180Z\",\n  \"title\": \"{{title_hr_int}}\",\n  \"decision\": \"waiting\",\n  \"feedback_status\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"motivation\": \"test-motivation\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"test-english\",\n  \"salary\": \"test-salary\",\n  \"residences\": [\n      \"{{ID_RESIDENCE}}\"\n  ],\n  \"relocation_desires\": [\n    \"{{ID_COUNTRY}}\"\n  ],\n  \"relocation_desire_comment\": \"test-comment\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"summary\": \"test-summary\",\n  \"rejection_reason\": \"test-reject-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/hr-interviews/{{id_hr_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviews",
										"{{id_hr_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviews/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that title of variables are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
											"        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));",
											"        //pm.expect(jsonData.relocation_desires[0].id).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_int\"));",
											"        });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// // GET /Persons/ for getting interviewee_id",
											"// postman.setNextRequest(\"17027039-42fd7ec1-25ab-4aa5-bce9-fbb17fa1698b\");",
											"",
											"// // GET /residence/ for getting id_residences",
											"// postman.setNextRequest(\"17027039-a8af88de-bf09-4e71-a0d1-931753bcd8ff\");",
											"",
											"// // Get /country/ for getting id_country",
											"// postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-25T16:00:48.180Z\",\n  \"title\": \"{{title_hr_int}}\",\n  \"decision\": \"waiting\",\n  \"feedback_status\": \"waiting\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"motivation\": \"test-motivation\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"test-english\",\n  \"salary\": \"test-salary\",\n  \"residences\": [\n      \"{{ID_RESIDENCE}}\"\n  ],\n  \"relocation_desires\": [\n    \"{{ID_COUNTRY}}\"\n  ],\n  \"relocation_desire_comment\": \"test-comment\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"summary\": \"test-summary\",\n  \"rejection_reason\": \"test-reject-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/hr-interviews/{{id_hr_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviews",
										"{{id_hr_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/hr-interviews​/{id}​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/hr-interviews/{{id_hr_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviews",
										"{{id_hr_interview}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "hr_interviewers_auto",
					"item": [
						{
							"name": "/hr-interviewers/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/hr-interviewers/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviewers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviewers/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_hr_interviewers\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"is_primary\": true,\n  \"interview\": \"{{ID_HR_INTERVIEW}}\",\n  \"person\": \"{{ID_PERSON}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/hr-interviewers/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviewers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_HR_INTERVIEW\"));\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/hr-interviewers/{{id_hr_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviewers",
										"{{id_hr_interviewers}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_HR_INTERVIEW\"));\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"is_primary\": true,\n  \"interview\": \"{{ID_HR_INTERVIEW}}\",\n  \"person\": \"{{ID_PERSON}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/hr-interviewers/{{id_hr_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviewers",
										"{{id_hr_interviewers}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_HR_INTERVIEW\"));\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"is_primary\": true,\n  \"interview\": \"{{ID_HR_INTERVIEW}}\",\n  \"person\": \"{{ID_PERSON}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/hr-interviewers/{{id_hr_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviewers",
										"{{id_hr_interviewers}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/hr-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/hr-interviewers/{{id_hr_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"hr-interviewers",
										"{{id_hr_interviewers}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tech-interviews_auto",
					"item": [
						{
							"name": "​/tech-interviews​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interviews​/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_tech_interview\", \"tech-interview\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_tech_interview\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-18T14:30:36.760Z\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"title\": \"{{title_tech_interview}}\",\n  \"tech_interview_type\": \"position\",\n  \"feedback_status\": \"waiting\",\n  \"decision\": \"waiting\",\n  \"strong_sides\": \"strong_side-test\",\n  \"weak_sides\": \"weak_side-test\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"english-level-test\",\n  \"soft_skills\": \"soft-skill-test\",\n  \"team_skills\": \"team-skill-test\",\n  \"tech_skills\": \"tech-skill-test\",\n  \"system_design\": \"system-design-test\",\n  \"coding_task\": \"coding-task-test\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"summary\": \"summary-test\",\n  \"rejection_reason\": \"rejection-reason-test\",\n  \"outcome_comment\": \"outcome-comment-test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interviews​/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_interview\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interviews/{{id_tech_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviews",
										"{{id_tech_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interviews​/ {id}/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_tech_interview\", \"tech-interview\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_interview\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-18T14:30:36.760Z\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"title\": \"{{title_tech_interview}}\",\n  \"tech_interview_type\": \"position\",\n  \"feedback_status\": \"waiting\",\n  \"decision\": \"waiting\",\n  \"strong_sides\": \"strong_side-test\",\n  \"weak_sides\": \"weak_side-test\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"english-level-test\",\n  \"soft_skills\": \"soft-skill-test\",\n  \"team_skills\": \"team-skill-test\",\n  \"tech_skills\": \"tech-skill-test\",\n  \"system_design\": \"system-design-test\",\n  \"coding_task\": \"coding-task-test\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"summary\": \"summary-test\",\n  \"rejection_reason\": \"rejection-reason-test\",\n  \"outcome_comment\": \"outcome-comment-test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interviews/{{id_tech_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviews",
										"{{id_tech_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interviews​/ {id}/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_tech_interview\", \"tech-interview\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_interview\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2021-10-18T14:30:36.760Z\",\n  \"interviewee\": \"{{ID_PERSON}}\",\n  \"title\": \"{{title_tech_interview}}\",\n  \"tech_interview_type\": \"position\",\n  \"feedback_status\": \"waiting\",\n  \"decision\": \"waiting\",\n  \"strong_sides\": \"strong_side-test\",\n  \"weak_sides\": \"weak_side-test\",\n  \"english_level\": \"beginner\",\n  \"english_comment\": \"english-level-test\",\n  \"soft_skills\": \"soft-skill-test\",\n  \"team_skills\": \"team-skill-test\",\n  \"tech_skills\": \"tech-skill-test\",\n  \"system_design\": \"system-design-test\",\n  \"coding_task\": \"coding-task-test\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"summary\": \"summary-test\",\n  \"rejection_reason\": \"rejection-reason-test\",\n  \"outcome_comment\": \"outcome-comment-test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interviews/{{id_tech_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviews",
										"{{id_tech_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interviews​/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interviews/{{id_tech_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviews",
										"{{id_tech_interview}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tech_interviewers_auto",
					"item": [
						{
							"name": "/tech-interviewers/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interviewers/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviewers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/tech-interviewers/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_tech_interviewers\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"area\": [\n    \"soft_skill\"\n  ],\n  \"is_primary\": true,\n  \"interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"person\": \"{{ID_PERSON}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interviewers/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviewers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/tech-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interviewers/{{id_tech_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviewers",
										"{{id_tech_interviewers}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/tech-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"area\": [\n    \"soft_skill\"\n  ],\n  \"is_primary\": true,\n  \"interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"person\": \"{{ID_PERSON}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interviewers/{{id_tech_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviewers",
										"{{id_tech_interviewers}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/tech-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"area\": [\n    \"soft_skill\"\n  ],\n  \"is_primary\": true,\n  \"interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"person\": \"{{ID_PERSON}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interviewers/{{id_tech_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviewers",
										"{{id_tech_interviewers}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/tech-interviewers/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interviewers/{{id_tech_interviewers}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interviewers",
										"{{id_tech_interviewers}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tech-interview-skills_auto",
					"item": [
						{
							"name": "​/tech-interview-skills​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interview-skills/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interview-skills",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interview-skills​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_tech_interview_skills\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tech_interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"skill\": \"{{ID_SKILLS}}\",\n  \"assumption_grade\": \"senior\",\n  \"real_grade\": \"senior\",\n  \"is_primary\": false\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interview-skills/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interview-skills",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interviews-skills/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.tech_interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interview-skills",
										"{{id_tech_interview_skills}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interview-skills​/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.tech_interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tech_interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"skill\": \"{{ID_SKILLS}}\",\n  \"assumption_grade\": \"senior\",\n  \"real_grade\": \"senior\",\n  \"is_primary\": true\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interview-skills",
										"{{id_tech_interview_skills}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interview-skills​/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Checking for correct title\r",
											"pm.test(\"Verify that title of variables are correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.tech_interview).to.eql(pm.globals.get(\"ID_TECH_INTERVIEW\"));\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tech_interview\": \"{{ID_TECH_INTERVIEW}}\",\n  \"skill\": \"{{ID_SKILLS}}\",\n  \"assumption_grade\": \"senior\",\n  \"real_grade\": \"senior\",\n  \"is_primary\": true\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interview-skills",
										"{{id_tech_interview_skills}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/tech-interview-skills​/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/tech-interview-skills/{{id_tech_interview_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"tech-interview-skills",
										"{{id_tech_interview_skills}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "position-interviews_auto",
					"item": [
						{
							"name": "/position-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/position-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// random base-interview title",
											"var rnd = Math.floor((Math.random() * 10000) + 1);",
											"postman.setEnvironmentVariable(\"title_position_interview\", \"position_interview\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Checking for correct responce code",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"// Set var 'id' ",
											"pm.test(\"Set variable id\", function () {",
											"    var jsonData = pm.response.json();",
											"    //console.log('This is jsonData', jsonData.id)",
											"    pm.environment.set(\"id_position_interview\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-18T13:15:55.413Z\",\r\n  \"title\": \"{{title_position_interview}}\",\r\n  \"decision\": \"waiting\",\r\n  \"interviewee\": \"{{ID_PERSON}}\",\r\n  \"interviewers\": [\r\n    \"Test-interviewer-1\",\r\n    \"Test-interviewer-2\"\r\n  ],\r\n  \"position_interview_type\": \"client_interview\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"summary\": \"test-summary\",\r\n  \"rejection_reason\": \"test-rejection-reason\",\r\n  \"outcome_comment\": \"test-comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-interviews/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that title of variables are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_interview\"));",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/position-interviews/{{id_position_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-interviews",
										"{{id_position_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-interviews/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// random base-interview title",
											"var rnd = Math.floor((Math.random() * 10000) + 1);",
											"postman.setEnvironmentVariable(\"title_position_interview\", \"position_interview\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that title of variables are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_interview\"));",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-18T13:15:55.413Z\",\r\n  \"title\": \"{{title_position_interview}}\",\r\n  \"decision\": \"waiting\",\r\n  \"interviewee\": \"{{ID_PERSON}}\",\r\n  \"interviewers\": [\r\n    \"Test-interviewer-1\",\r\n    \"Test-interviewer-2\"\r\n  ],\r\n  \"position_interview_type\": \"client_interview\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"summary\": \"test-summary\",\r\n  \"rejection_reason\": \"test-rejection-reason\",\r\n  \"outcome_comment\": \"test-comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-interviews/{{id_position_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-interviews",
										"{{id_position_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-interviews/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking for correct title",
											"pm.test(\"Verify that title of variables are correct\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log('This is jsonData', jsonData.title)",
											"        pm.expect(jsonData.interviewee).to.eql(pm.globals.get(\"ID_PERSON\"));",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_interview\"));",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));",
											"        });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// random base-interview title",
											"var rnd = Math.floor((Math.random() * 10000) + 1);",
											"postman.setEnvironmentVariable(\"title_position_interview\", \"position_interview\"+rnd);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-18T13:15:55.413Z\",\r\n  \"title\": \"{{title_position_interview}}\",\r\n  \"decision\": \"waiting\",\r\n  \"interviewee\": \"{{ID_PERSON}}\",\r\n  \"interviewers\": [\r\n    \"Test-interviewer-1\",\r\n    \"Test-interviewer-2\"\r\n  ],\r\n  \"position_interview_type\": \"client_interview\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"summary\": \"test-summary\",\r\n  \"rejection_reason\": \"test-rejection-reason\",\r\n  \"outcome_comment\": \"test-comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-interviews/{{id_position_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-interviews",
										"{{id_position_interview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-interviews/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/position-interviews/{{id_position_interview}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-interviews",
										"{{id_position_interview}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Cities_auto",
			"item": [
				{
					"name": "/cities/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Responce is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/cities/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cities",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/cities/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"id_city\", jsonData.id);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_cities\", \"title\"+rnd);\r",
									"\r",
									"// Get /country/ for getting id_country\r",
									"//postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_cities}}\",\n  \"country\": \"{{ID_COUNTRY}}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cities/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cities",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/cities/{id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Responce is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that title_cities is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_cities\"));\r",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/cities/{{id_city}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cities",
								"{{id_city}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/cities/{id}/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_cities\", \"title\"+rnd);\r",
									"\r",
									"// Get /country/ for getting id_country\r",
									"// postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Responce is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that title_cities is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_cities\"));\r",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
									"        });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_cities}}\",\n  \"country\": \"{{ID_COUNTRY}}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cities/{{id_city}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cities",
								"{{id_city}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/cities/{id}/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_cities\", \"title\"+rnd);\r",
									"\r",
									"// Get /country/ for getting id_country\r",
									"// postman.setNextRequest(\"17027039-08f188d3-65e9-4e6f-8773-79fe624b35e6\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Responce is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that title_cities is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_cities\"));\r",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_cities}}\",\n  \"country\": \"{{ID_COUNTRY}}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cities/{{id_city}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cities",
								"{{id_city}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clients_auto",
			"item": [
				{
					"name": "/clients/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Responce is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/clients/",
							"host": [
								"{{host}}"
							],
							"path": [
								"clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/clients/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random for clients title",
									"var rnd = Math.floor((Math.random() * 10000) + 1);",
									"postman.setEnvironmentVariable(\"title_client\", \"title\"+rnd);",
									"",
									"// random for clients short_title",
									"var rnd = Math.floor((Math.random() * 100) + 1);",
									"postman.setEnvironmentVariable(\"short_title_client\", \"\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"// Set var 'id' ",
									"pm.test(\"Set variable id\", function () {",
									"    var jsonData = pm.response.json();",
									"    //console.log('This is jsonData', jsonData.id)",
									"    pm.environment.set(\"id_client\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_client}}\",\n  \"short_title\": \"{{short_title_client}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clients/",
							"host": [
								"{{host}}"
							],
							"path": [
								"clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/clients​/{id}​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Equality checking",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
									"        var jsonData = pm.response.json();",
									"        //console.log('This is jsonData', jsonData.title)",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_client\"));",
									"        pm.expect(jsonData.short_title).to.eql(pm.environment.get(\"short_title_client\"));",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/clients/{{id_client}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"clients",
								"{{id_client}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/clients​/{id}​/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random for clients title",
									"var rnd = Math.floor((Math.random() * 10000) + 1);",
									"postman.setEnvironmentVariable(\"title_client\", \"title\"+rnd);",
									"",
									"// random for clients short_title",
									"var rnd = Math.floor((Math.random() * 100) + 1);",
									"postman.setEnvironmentVariable(\"short_title_client\", \"\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Responce is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Equality checking",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
									"        var jsonData = pm.response.json();",
									"        //console.log('This is jsonData', jsonData.title)",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_client\"));",
									"        pm.expect(jsonData.short_title).to.eql(pm.environment.get(\"short_title_client\"));",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_client}}\",\n  \"short_title\": \"{{short_title_client}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clients/{{id_client}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"clients",
								"{{id_client}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/clients​/{id}​/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random for clients title",
									"var rnd = Math.floor((Math.random() * 10000) + 1);",
									"postman.setEnvironmentVariable(\"title_client\", \"title\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status and format checking ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Responce is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Equality checking",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
									"        var jsonData = pm.response.json();",
									"        //console.log('This is jsonData', jsonData.title)",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_client\"));",
									"        pm.expect(jsonData.short_title).to.eql(pm.environment.get(\"short_title_client\"));",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_client}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clients/{{id_client}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"clients",
								"{{id_client}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Countries_auto",
			"item": [
				{
					"name": "/countries/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// //GET id_country",
									"// pm.test(\"Set variable id\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     //console.log('This is jsonData', jsonData.id)",
									"//     pm.environment.set(\"id_country\", jsonData[0].id);",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/countries/",
							"host": [
								"{{host}}"
							],
							"path": [
								"countries",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/countries/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_country\", \"title\"+rnd);\r",
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_country_ru\", \"название\"+rnd);\r",
									"var rnd = Math.floor((Math.random() * 100) - 1);\r",
									"postman.setEnvironmentVariable(\"short_title_country\", \"\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"// Set var 'id' \r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"id_country\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_country}}\",\n  \"title_ru\": \"{{title_country_ru}}\",\n  \"code\": \"{{short_title_country}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/countries/",
							"host": [
								"{{host}}"
							],
							"path": [
								"countries",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/countries/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_country\"));\r",
									"        pm.expect(jsonData.title_ru).to.eql(pm.environment.get(\"title_country_ru\"));\r",
									"        pm.expect(jsonData.code).to.eql(pm.environment.get(\"short_title_country\"));\r",
									"        });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}/countries/{{id_country}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"countries",
								"{{id_country}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/countries/{id}/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_country\", \"title\"+rnd);\r",
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_country_ru\", \"название\"+rnd);\r",
									"var rnd = Math.floor((Math.random() * 100) - 1);\r",
									"postman.setEnvironmentVariable(\"short_title_country\", \"\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_country\"));\r",
									"        pm.expect(jsonData.title_ru).to.eql(pm.environment.get(\"title_country_ru\"));\r",
									"        pm.expect(jsonData.code).to.eql(pm.environment.get(\"short_title_country\"));\r",
									"        });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_country}}\",\n  \"title_ru\": \"{{title_country_ru}}\",\n  \"code\": \"{{short_title_country}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/countries/{{id_country}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"countries",
								"{{id_country}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/countries/{id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_country\"));\r",
									"        pm.expect(jsonData.title_ru).to.eql(pm.environment.get(\"title_country_ru\"));\r",
									"        pm.expect(jsonData.code).to.eql(pm.environment.get(\"short_title_country\"));\r",
									"        });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_country\", \"title\"+rnd);\r",
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_country_ru\", \"название\"+rnd);\r",
									"var rnd = Math.floor((Math.random() * 100) - 1);\r",
									"postman.setEnvironmentVariable(\"short_title_country\", \"\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_country}}\",\n  \"title_ru\": \"{{title_country_ru}}\",\n  \"code\": \"{{short_title_country}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/countries/{{id_country}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"countries",
								"{{id_country}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Country-timezones_auto",
			"item": [
				{
					"name": "/country-timezones/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// //GET id_country",
									"// pm.test(\"Set variable id\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     //console.log('This is jsonData', jsonData.id)",
									"//     pm.environment.set(\"id_country\", jsonData[0].id);",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/country-timezones/",
							"host": [
								"{{host}}"
							],
							"path": [
								"country-timezones",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/country-timezones/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"// Set var 'id' ",
									"pm.test(\"Set variable id\", function () {",
									"    var jsonData = pm.response.json();",
									"    //console.log('This is jsonData', jsonData.id)",
									"    pm.environment.set(\"id_time_zone\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_time_zone\", \"time-zone\"+rnd);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title_time_zone}}\",\r\n  \"utc_offset\": 0,\r\n  \"utc_dst_offset\": 0,\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/country-timezones/",
							"host": [
								"{{host}}"
							],
							"path": [
								"country-timezones",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/country-timezones/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Equality checking",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
									"        var jsonData = pm.response.json();",
									"        //console.log('This is jsonData', jsonData.title)",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_time_zone\"));",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/country-timezones/{{id_time_zone}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"country-timezones",
								"{{id_time_zone}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/country-timezones/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Equality checking",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
									"        var jsonData = pm.response.json();",
									"        //console.log('This is jsonData', jsonData.title)",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_time_zone\"));",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_time_zone\", \"time-zone\"+rnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title_time_zone}}\",\r\n  \"utc_offset\": 0,\r\n  \"utc_dst_offset\": 0,\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/country-timezones/{{id_time_zone}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"country-timezones",
								"{{id_time_zone}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/country-timezones/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Equality checking",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
									"        var jsonData = pm.response.json();",
									"        //console.log('This is jsonData', jsonData.title)",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_time_zone\"));",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_time_zone\", \"time-zone\"+rnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title_time_zone}}\",\r\n  \"utc_offset\": 0,\r\n  \"utc_dst_offset\": 0,\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/country-timezones/{{id_time_zone}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"country-timezones",
								"{{id_time_zone}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Static_data_auto",
			"item": [
				{
					"name": "/static-data/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Checking responce correctly [DRAFT]",
									"// pm.test(\"English_level_check\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     pm.expect(jsonData.interviews.ENGLISH_LEVEL.id).to.eql(beginner);",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/static-data/",
							"host": [
								"{{host}}"
							],
							"path": [
								"static-data",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lock_auto",
			"item": [
				{
					"name": "/lock/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//GET id_country",
									"pm.test(\"Set variable id\", function () {",
									"    var jsonData = pm.response.json();",
									"    //console.log('This is jsonData', jsonData.id)",
									"    pm.environment.set(\"id_lock\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/lock/",
							"host": [
								"{{host}}"
							],
							"path": [
								"lock",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/lock/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// pm.test(\"Verify that title_client and short_title_client is correct\", function () {",
									"//         var jsonData = pm.response.json();",
									"//         //console.log('This is jsonData', jsonData.title)",
									"//         pm.expect(jsonData.key_change_in_progress).to.eql(pm.environment.get(\"key_change_in_progress\"));",
									"//         });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key_change_in_progress\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/lock/{{id_lock}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"lock",
								"{{id_lock}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hr-importer_auto",
			"item": [
				{
					"name": "/hr-importer/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/hr-importer/",
							"host": [
								"{{host}}"
							],
							"path": [
								"hr-importer",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "hr-importer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "generated_json",
									"type": "file",
									"src": "NX5sQDJ5J/persons.json"
								}
							]
						},
						"url": {
							"raw": "{{host}}/hr-importer/",
							"host": [
								"{{host}}"
							],
							"path": [
								"hr-importer",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles_auto",
			"item": [
				{
					"name": "​/roles​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/roles/",
							"host": [
								"{{host}}"
							],
							"path": [
								"roles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/roles/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_role\", \"role\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"// Set var 'id' \r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"id_role\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{title_role}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/roles/",
							"host": [
								"{{host}}"
							],
							"path": [
								"roles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/roles​/{id}​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_role\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/roles/{{id_role}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"roles",
								"{{id_role}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "​/roles​/{id}​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_role\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_role\", \"role\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{title_role}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/roles/{{id_role}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"roles",
								"{{id_role}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/roles​/{id}​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_role\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_role\", \"role\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{title_role}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/roles/{{id_role}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"roles",
								"{{id_role}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Skills_auto",
			"item": [
				{
					"name": "/skills/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/skills/",
							"host": [
								"{{host}}"
							],
							"path": [
								"skills",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/skills/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_skill\", \"skill\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"// Set var 'id' \r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"id_skill\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_skill}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/skills/",
							"host": [
								"{{host}}"
							],
							"path": [
								"skills",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/skills​/{id}​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_skill\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/skills/{{id_skill}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"skills",
								"{{id_skill}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/skills​/{id}​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_skill\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_skill\", \"skill\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_skill}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/skills/{{id_skill}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"skills",
								"{{id_skill}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/skills​/{id}​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_skill\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_skill\", \"skill\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_skill}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/skills/{{id_skill}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"skills",
								"{{id_skill}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transliteration_auto",
			"item": [
				{
					"name": "​/transliteration​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Рушат",
									"type": "text"
								},
								{
									"key": "input_text",
									"value": "Рушат",
									"type": "text"
								},
								{
									"key": "output_text",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{host}}/transliteration/",
							"host": [
								"{{host}}"
							],
							"path": [
								"transliteration",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects_auto",
			"item": [
				{
					"name": "/projects/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/projects/",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "finished",
									"disabled": true
								},
								{
									"key": "page_filter",
									"value": "positions_history",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_project\", \"project\"+rnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"// Set var 'id' \r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"id_project\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_project}}\",\n  \"client\": \"{{ID_CLIENT}}\",\n  \"status\": \"rejected\",\n  \"rejection_reason\": \"not_found_candidates\",\n  \"finish_reason\": \"test-finish-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/projects/",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_project\"));\r",
									"        pm.expect(jsonData.client.id).to.eql(pm.globals.get(\"ID_CLIENT\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/projects/{{id_project}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								"{{id_project}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_project\"));\r",
									"        pm.expect(jsonData.client).to.eql(pm.globals.get(\"ID_CLIENT\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_project\", \"project\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_project}}\",\n  \"client\": \"{{ID_CLIENT}}\",\n  \"status\": \"waiting\",\n  \"rejection_reason\": \"not_found_candidates\",\n  \"finish_reason\": \"test-finish-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/projects/{{id_project}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								"{{id_project}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/projects/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_project\"));\r",
									"        pm.expect(jsonData.client).to.eql(pm.globals.get(\"ID_CLIENT\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_project\", \"project\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{title_project}}\",\n  \"client\": \"{{ID_CLIENT}}\",\n  \"status\": \"waiting\",\n  \"rejection_reason\": \"not_found_candidates\",\n  \"finish_reason\": \"test-finish-reason\",\n  \"outcome_comment\": \"test-comment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/projects/{{id_project}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"projects",
								"{{id_project}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "residence_auto",
			"item": [
				{
					"name": "/residence/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/residences/",
							"host": [
								"{{host}}"
							],
							"path": [
								"residences",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/residence/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"//GET id_residence \r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"id_residence\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_residence\", \"test_residence\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"residence_type\": \"{{title_residence}}\",\n  \"country\": \"{{ID_COUNTRY}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/residences/",
							"host": [
								"{{host}}"
							],
							"path": [
								"residences",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/residence/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.residence_type).to.eql(pm.environment.get(\"title_residence\"));\r",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/residences/{{id_residence}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"residences",
								"{{id_residence}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/residence/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.residence_type).to.eql(pm.environment.get(\"title_residence\"));\r",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_residence\", \"test_residence\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"residence_type\": \"{{title_residence}}\",\n  \"country\": \"{{ID_COUNTRY}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/residences/{{id_residence}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"residences",
								"{{id_residence}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/residence/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Equality checking\r",
									"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        //console.log('This is jsonData', jsonData.title)\r",
									"        pm.expect(jsonData.residence_type).to.eql(pm.environment.get(\"title_residence\"));\r",
									"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
									"        });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
									"postman.setEnvironmentVariable(\"title_residence\", \"test_residence\"+rnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"residence_type\": \"{{title_residence}}\",\n  \"country\": \"{{ID_COUNTRY}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/residences/{{id_residence}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"residences",
								"{{id_residence}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/residence/ {id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/residences/{{id_residence}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"residences",
								"{{id_residence}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Persons_auto",
			"item": [
				{
					"name": "persons_auto",
					"item": [
						{
							"name": "/persons/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //GET id_person\r",
											"// pm.test(\"Set variable id\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     //console.log('This is jsonData', jsonData.id)\r",
											"//     pm.environment.set(\"id_person\", jsonData.results[0].id);\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										""
									],
									"query": [
										{
											"key": "first_name",
											"value": "Rick",
											"disabled": true
										},
										{
											"key": "middle_name",
											"value": "Smith",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "HR Last_Name",
											"disabled": true
										},
										{
											"key": "english_level",
											"value": "advanced",
											"disabled": true
										},
										{
											"key": "office_location",
											"value": "USA",
											"disabled": true
										},
										{
											"key": "assigned_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "relocation_desire",
											"value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
											"disabled": true
										},
										{
											"key": "residence_type",
											"value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
											"disabled": true
										},
										{
											"key": "role",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_person\", jsonData.id);\r",
											"    //pm.globals.set(\"ID_PERSON\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
											"        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
											"        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
											"        });\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
											"        //pm.expect(jsonData.residences[0]).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
											"        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/{{ID_PERSON}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"{{ID_PERSON}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons/ {id}/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
											"        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
											"        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
											"        });\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
											"        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
											"        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons/{{id_person}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"{{id_person}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons/ {id}/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
											"        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
											"        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
											"        });\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
											"        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
											"        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons/{{id_person}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"{{id_person}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/{{id_person}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"{{id_person}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "persons/hrs/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/hrs/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"hrs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-tech-interviewers/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //GET id_person\r",
											"// pm.test(\"Set variable id\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     //console.log('This is jsonData', jsonData.id)\r",
											"//     pm.environment.set(\"id_person\", jsonData.results[0].id);\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/tech-interviewers/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"tech-interviewers",
										""
									],
									"query": [
										{
											"key": "first_name",
											"value": "Rick",
											"disabled": true
										},
										{
											"key": "middle_name",
											"value": "Smith",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "HR Last_Name",
											"disabled": true
										},
										{
											"key": "english_level",
											"value": "advanced",
											"disabled": true
										},
										{
											"key": "office_location",
											"value": "USA",
											"disabled": true
										},
										{
											"key": "assigned_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "relocation_desire",
											"value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
											"disabled": true
										},
										{
											"key": "residence_type",
											"value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
											"disabled": true
										},
										{
											"key": "role",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "persons/me/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404 (Person doesn't have user_model)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/me/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "persons/me/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404, Person doesn't have user_model\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
											"        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
											"        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
											"        });\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
											"        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
											"        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons/me/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "persons/me/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404, Person doesn't have user_model\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"person_first_name\"));\r",
											"        pm.expect(jsonData.middle_name).to.eql(pm.environment.get(\"person_middle_name\"));\r",
											"        pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"person_last_name\"));\r",
											"        });\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.city.id).to.eql(pm.globals.get(\"ID_CITY\"));\r",
											"        //pm.expect(jsonData.residences[0].id).to.eql(pm.globals.get(\"ID_RESIDENCE\"));\r",
											"        pm.expect(jsonData.assigned_hr.id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_first_name\", \"name\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_middle_name\", \"middle\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"person_last_name\", \"last\"+rnd);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"person_type\": \"base_external\",\r\n  \"roles\": [\r\n    \"{{ID_ROLE}}\"\r\n  ],\r\n  \"first_name\": \"{{person_first_name}}\",\r\n  \"middle_name\": \"{{person_middle_name}}\",\r\n  \"last_name\": \"{{person_last_name}}\",\r\n  \"office\": \"kazan\",\r\n  \"city\": {\r\n    \"id\": \"{{ID_CITY}}\"\r\n  },\r\n  \"comment\": \"Test-comment\",\r\n  \"salary\": \"Test-salary\",\r\n  \"english_level\": \"beginner\",\r\n  \"english_comment\": \"advanced\",\r\n  \"residences\": [\r\n    \"{{ID_RESIDENCE}}\"\r\n  ],\r\n  \"relocation_desires\": [\r\n    \"{{ID_COUNTRY}}\"\r\n  ],\r\n  \"relocation_comment\": \"Test-comment\",\r\n  \"email\": [\r\n    \"test@example.com\"\r\n  ],\r\n  \"assigned_hr\": {\r\n    \"id\": \"{{ID_PERSON}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2.0/persons/me/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2.0",
										"persons",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "persons/me/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"pm.test(\"Status code is 404, Person doesn't have user_model\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/me/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										"me",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "persons_other_cvs_auto",
					"item": [
						{
							"name": "/persons-cvs/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/persons-other-cvs/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-other-cvs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-cvs/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_person_other_cvs\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "is_current",
											"value": "true",
											"type": "text"
										},
										{
											"key": "person",
											"value": "{{ID_PERSON}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Akvelon/Downloads/dismiss logic.txt"
										}
									]
								},
								"url": {
									"raw": "{{host}}/persons-other-cvs/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-other-cvs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-cvs/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-other-cvs/{{id_person_other_cvs}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-other-cvs",
										"{{id_person_other_cvs}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-cvs/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "is_current",
											"value": "true",
											"type": "text"
										},
										{
											"key": "person",
											"value": "{{ID_PERSON}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/persons-other-cvs/{{id_person_other_cvs}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-other-cvs",
										"{{id_person_other_cvs}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-cvs/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "is_current",
											"value": "true",
											"type": "text"
										},
										{
											"key": "person",
											"value": "{{ID_PERSON}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Рушат/Desktop/1_vdh5SWbgqYu4QNgtovBt2A.png",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host}}/persons-other-cvs/{{id_person_other_cvs}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-other-cvs",
										"{{id_person_other_cvs}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-cvs/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{host}}/persons-other-cvs/{{id_person_other_cvs}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-other-cvs",
										"{{id_person_other_cvs}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "persons-skills_auto",
					"item": [
						{
							"name": "​/persons-skills​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-skills/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-skills",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/persons-skills​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_person_skills\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"grade\": \"senior\",\r\n  \"is_primary\": true,\r\n  \"is_confirmed\": true,\r\n  \"person\": \"{{ID_PERSON}}\",\r\n  \"skill\": \"{{ID_SKILLS}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons-skills/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-skills",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/persons-skills​/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-skills/{{id_person_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-skills",
										"{{id_person_skills}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/persons-skills​/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"grade\": \"senior\",\r\n  \"is_primary\": true,\r\n  \"is_confirmed\": true,\r\n  \"person\": \"{{ID_PERSON}}\",\r\n  \"skill\": \"{{ID_SKILLS}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons-skills/{{id_person_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-skills",
										"{{id_person_skills}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/persons-skills​/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"grade\": \"senior\",\r\n  \"is_primary\": true,\r\n  \"is_confirmed\": true,\r\n  \"person\": \"{{ID_PERSON}}\",\r\n  \"skill\": \"{{ID_SKILLS}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons-skills/{{id_person_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-skills",
										"{{id_person_skills}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/persons-skills​/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-skills/{{id_person_skills}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-skills",
										"{{id_person_skills}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "persons-work-histories_auto",
					"item": [
						{
							"name": "/persons-work-histories/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-work-histories/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-work-histories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-work-histories/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_person_work_hostory\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"start_work_date\": \"2021-10-18\",\r\n  \"end_work_date\": \"2021-10-18\",\r\n  \"rejection_reason\": \"Test-reject\",\r\n  \"outcome_comment\": \"Test-comment\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons-work-histories/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-work-histories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-work-histories/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-work-histories",
										"{{id_person_work_hostory}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-work-histories/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"start_work_date\": \"2021-10-18\",\r\n  \"end_work_date\": \"2021-10-18\",\r\n  \"rejection_reason\": \"Test-reject\",\r\n  \"outcome_comment\": \"Test-comment\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-work-histories",
										"{{id_person_work_hostory}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-work-histories/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"start_work_date\": \"2021-10-18\",\r\n  \"end_work_date\": \"2021-10-18\",\r\n  \"rejection_reason\": \"Test-reject\",\r\n  \"outcome_comment\": \"Test-comment\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-work-histories",
										"{{id_person_work_hostory}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons-work-histories/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-work-histories/{{id_person_work_hostory}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-work-histories",
										"{{id_person_work_hostory}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "persons_positions_auto",
					"item": [
						{
							"name": "{id}/in-progress/",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-positions/{{ID_PERSON}}/in-progress/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-positions",
										"{{ID_PERSON}}",
										"in-progress",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "{id}/staffed/",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-positions/{{ID_PERSON}}/staffed/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-positions",
										"{{ID_PERSON}}",
										"staffed",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "{id}/history/",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons-positions/{{ID_PERSON}}/staffed/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons-positions",
										"{{ID_PERSON}}",
										"staffed",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Positions",
			"item": [
				{
					"name": "positions_auto",
					"item": [
						{
							"name": "/positions/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/positions/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_position\", \"test_position\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"//GET id_residence \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_position\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project\": \"{{ID_PROJECT}}\",\n  \"title\": \"{{title_position}}\",\n  \"status\": \"open\",\n  \"position_type\": \"project\",\n  \"priority\": \"low\",\n  \"is_confirmed\": false,\n  \"comment\": \"test-comment\",\n  \"role\": \"{{ID_ROLE}}\",\n  \"job_description\": \"test-description\",\n  \"rejection_reason\": \"test-rejection-reason\",\n  \"outcome_comment\": \"test-comment\",\n  \"position_hrs\": [\n    \"{{ID_PERSON}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/positions/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position\"));\r",
											"        pm.expect(jsonData.project.id).to.eql(pm.globals.get(\"ID_PROJECT\"));\r",
											"        //not implemented pm.expect(jsonData.project.role).to.eql(pm.globals.get(\"ID_ROLE\"));\r",
											"        pm.expect(jsonData.position_hrs[0].id).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/positions/{{id_position}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{id_position}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position\"));\r",
											"        pm.expect(jsonData.project).to.eql(pm.globals.get(\"ID_PROJECT\"));\r",
											"        //not implemented pm.expect(jsonData.project.role).to.eql(pm.globals.get(\"ID_ROLE\"));\r",
											"        pm.expect(jsonData.position_hrs[0]).to.eql(pm.globals.get(\"ID_PERSON\")); // Why it's without id?\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project\": \"{{ID_PROJECT}}\",\n  \"title\": \"{{title_position}}\",\n  \"status\": \"open\",\n  \"position_type\": \"project\",\n  \"priority\": \"low\",\n  \"is_confirmed\": false,\n  \"comment\": \"test-comment\",\n  \"role\": \"{{ID_ROLE}}\",\n  \"job_description\": \"test-description\",\n  \"rejection_reason\": \"test-rejection-reason\",\n  \"outcome_comment\": \"test-comment\",\n  \"position_hrs\": [\n    \"{{ID_PERSON}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/positions/{{id_position}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{id_position}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position\"));\r",
											"        pm.expect(jsonData.project).to.eql(pm.globals.get(\"ID_PROJECT\"));\r",
											"        //not implemented pm.expect(jsonData.project.role).to.eql(pm.globals.get(\"ID_ROLE\"));\r",
											"        pm.expect(jsonData.position_hrs[0]).to.eql(pm.globals.get(\"ID_PERSON\")); // Why it's without id?\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"project\": \"{{ID_PROJECT}}\",\n  \"title\": \"{{title_position}}\",\n  \"status\": \"open\",\n  \"position_type\": \"project\",\n  \"priority\": \"low\",\n  \"is_confirmed\": false,\n  \"comment\": \"test-comment\",\n  \"role\": \"{{ID_ROLE}}\",\n  \"job_description\": \"test-description\",\n  \"rejection_reason\": \"test-rejection-reason\",\n  \"outcome_comment\": \"test-comment\",\n  \"position_hrs\": [\n    \"{{ID_PERSON}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/positions/{{id_position}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{id_position}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/positions/{{id_position}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{id_position}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/ apply",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"person\": \"{{ID_PERSON}}\",\r\n  \"billable_status\": \"billable\",\r\n  \"employment_type\": \"basic\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/positions/{{ID_POSITION}}/apply/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{ID_POSITION}}",
										"apply",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/ recommended-external",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/positions/{{ID_POSITION}}/recommended-external/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{ID_POSITION}}",
										"recommended-external",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/ recommended-external",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/positions/{{ID_POSITION}}/recommended-internal/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{ID_POSITION}}",
										"recommended-internal",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/ candidates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/positions/{{ID_POSITION}}/candidates/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{ID_POSITION}}",
										"candidates",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/ staffed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/positions/{{ID_POSITION}}/staffed/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{ID_POSITION}}",
										"staffed",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/positions/ {id}/ history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/positions/{{ID_POSITION}}/history/",
									"host": [
										"{{host}}"
									],
									"path": [
										"positions",
										"{{ID_POSITION}}",
										"history",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "position_remote_type",
					"item": [
						{
							"name": "/position-remote-type/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/position-remote-types/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-remote-types",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-remote-type/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_position_remote_types\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"remote_type\": \"offshore\",\n  \"position\": \"{{ID_POSITION}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-remote-types/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-remote-types",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-remote-type/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/position-remote-types/{{id_position_remote_types}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-remote-types",
										"{{id_position_remote_types}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-remote-type/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"remote_type\": \"offshore\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-remote-types/{{id_position_remote_types}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-remote-types",
										"{{id_position_remote_types}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-remote-type/{id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"remote_type\": \"offshore\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-remote-types/{{id_position_remote_types}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-remote-types",
										"{{id_position_remote_types}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position-remote-type/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-remote-types/{{id_position_remote_types}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-remote-types",
										"{{id_position_remote_types}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "position-assigned-offices",
					"item": [
						{
							"name": "position-assigned-offices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/position-assigned-offices/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-assigned-offices",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "position-assigned-offices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_position_assigned_offices\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"office\": \"kazan\",\n  \"is_primary\": false,\n  \"position\": \"{{ID_POSITION}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-assigned-offices/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-assigned-offices",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "position-assigned-offices {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/position-assigned-offices/{{id_position_assigned_offices}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-assigned-offices",
										"{{id_position_assigned_offices}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "position-assigned-offices {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"office\": \"kazan\",\r\n  \"is_primary\": false,\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-assigned-offices/{{id_position_assigned_offices}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-assigned-offices",
										"{{id_position_assigned_offices}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "position-assigned-offices {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"office\": \"kazan\",\r\n  \"is_primary\": false,\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-assigned-offices/{{id_position_assigned_offices}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-assigned-offices",
										"{{id_position_assigned_offices}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "position-assigned-offices {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-assigned-offices/{{id_position_assigned_offices}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-assigned-offices",
										"{{id_position_assigned_offices}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "position_countries",
					"item": [
						{
							"name": "/position_countries/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/position-countries/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-countries",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position_countries/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_position_countries\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"use_type\": \"original_location\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"country\": \"{{ID_COUNTRY}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-countries/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-countries",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position_countries/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"))\r",
											"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/position-countries/{{id_position_countries}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-countries",
										"{{id_position_countries}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position_countries/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"))\r",
											"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"use_type\": \"original_location\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-countries/{{id_position_countries}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-countries",
										"{{id_position_countries}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position_countries/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"))\r",
											"        pm.expect(jsonData.country).to.eql(pm.globals.get(\"ID_COUNTRY\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"use_type\": \"original_location\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"country\": \"{{ID_COUNTRY}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-countries/{{id_position_countries}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-countries",
										"{{id_position_countries}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/position_countries/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-countries/{{id_position_countries}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-countries",
										"{{id_position_countries}}",
										""
									],
									"query": [
										{
											"key": "page_filter",
											"value": "mine",
											"disabled": true
										},
										{
											"key": "title",
											"value": "Apple project",
											"disabled": true
										},
										{
											"key": "status",
											"value": "rejected",
											"disabled": true
										},
										{
											"key": "position_type",
											"value": "bench",
											"disabled": true
										},
										{
											"key": "ordering",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"disabled": true
										},
										{
											"key": "project",
											"value": "Ap",
											"disabled": true
										},
										{
											"key": "position_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "job_type",
											"value": "part_time",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "staff_place",
					"item": [
						{
							"name": "/staff-places/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/staff-places/",
									"host": [
										"{{host}}"
									],
									"path": [
										"staff-places",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/staff-places/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_staff_places\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"start_date\": \"2021-11-10T14:15:45.074Z\",\r\n  \"finish_date\": \"2021-11-10\",\r\n  \"outcome_comment\": \"test-outcome-comment\",\r\n  \"position_remote_type\": \"{{ID_POSITION_REMOTE_TYPE}}\",\r\n  \"base_request\": \"{{ID_BR}}\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/staff-places/",
									"host": [
										"{{host}}"
									],
									"path": [
										"staff-places",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/staff-places/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"))\r",
											"        pm.expect(jsonData.position_remote_type).to.eql(pm.globals.get(\"ID_POSITION_REMOTE_TYPE\"))\r",
											"        pm.expect(jsonData.base_request).to.eql(pm.globals.get(\"ID_BR\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/staff-places/{{id_staff_places}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"staff-places",
										"{{id_staff_places}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/staff-places/ {id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"))\r",
											"        pm.expect(jsonData.position_remote_type).to.eql(pm.globals.get(\"ID_POSITION_REMOTE_TYPE\"))\r",
											"        pm.expect(jsonData.base_request).to.eql(pm.globals.get(\"ID_BR\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"start_date\": \"2021-11-10T14:15:45.074Z\",\r\n  \"finish_date\": \"2021-11-10\",\r\n  \"outcome_comment\": \"test-outcome-comment\",\r\n  \"position_remote_type\": \"{{ID_POSITION_REMOTE_TYPE}}\",\r\n  \"base_request\": \"{{ID_BR}}\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/staff-places/{{id_staff_places}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"staff-places",
										"{{id_staff_places}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/staff-places/ {id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"))\r",
											"        pm.expect(jsonData.position_remote_type).to.eql(pm.globals.get(\"ID_POSITION_REMOTE_TYPE\"))\r",
											"        pm.expect(jsonData.base_request).to.eql(pm.globals.get(\"ID_BR\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"start_date\": \"2021-11-10T14:15:45.074Z\",\r\n  \"finish_date\": \"2021-11-10\",\r\n  \"outcome_comment\": \"test-outcome-comment\",\r\n  \"position_remote_type\": \"{{ID_POSITION_REMOTE_TYPE}}\",\r\n  \"base_request\": \"{{ID_BR}}\",\r\n  \"person\": \"{{ID_PERSON}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/staff-places/{{id_staff_places}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"staff-places",
										"{{id_staff_places}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/staff-places/ {id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/staff-places/{{id_staff_places}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"staff-places",
										"{{id_staff_places}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "position-skills_auto",
					"item": [
						{
							"name": "​/position​-skills/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/position-skills/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-skills",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/position​-skills/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_position_skill\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grade\": \"senior\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-skills/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-skills",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/position​-skills/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/position-skills/{{id_position_skill}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-skills",
										"{{id_position_skill}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/position​-skills/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grade\": \"senior\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-skills/{{id_position_skill}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-skills",
										"{{id_position_skill}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/position​-skills/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.skill).to.eql(pm.globals.get(\"ID_SKILLS\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grade\": \"senior\",\n  \"position\": \"{{ID_POSITION}}\",\n  \"skill\": \"{{ID_SKILLS}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/position-skills/{{id_position_skill}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-skills",
										"{{id_position_skill}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/position​-skills/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/position-skills/{{id_position_skill}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-skills",
										"{{id_position_skill}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Base_requests_auto",
					"item": [
						{
							"name": "/base-requests/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/base-requests/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-requests",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-requests/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_base_requests\", jsonData.id);\r",
											"    //pm.globals.set(\"id_PS\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request_type\": \"candidate\",\n  \"billable_status\": \"billable\",\n  \"engagement_type\": \"new_business\",\n  \"job_type\": \"full_time\",\n  \"hours_per_day\": 0,\n  \"deadline\": \"2021-10-13\",\n  \"position\": \"{{ID_POSITION}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/base-requests/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-requests",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-requests/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/base-requests/{{id_base_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-requests",
										"{{id_base_requests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-requests/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"request_type\": \"candidate\",\r\n  \"billable_status\": \"billable\",\r\n  \"engagement_type\": \"new_business\",\r\n  \"job_type\": \"full_time\",\r\n  \"hours_per_day\": 0,\r\n  \"deadline\": \"2021-10-13\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/base-requests/{{id_base_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-requests",
										"{{id_base_requests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-requests/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"request_type\": \"candidate\",\r\n  \"billable_status\": \"billable\",\r\n  \"engagement_type\": \"new_business\",\r\n  \"job_type\": \"full_time\",\r\n  \"hours_per_day\": 0,\r\n  \"deadline\": \"2021-10-13\",\r\n  \"position\": \"{{ID_POSITION}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/base-requests/{{id_base_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-requests",
										"{{id_base_requests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/base-requests {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/base-requests/{{id_base_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"base-requests",
										"{{id_base_requests}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Candidates_auto",
					"item": [
						{
							"name": "/candidates/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status and format checking ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Responce is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/candidates/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"//GET id_pso\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_candidates\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"person\":\n        \"{{ID_PERSON}}\",\n    \"base_request\":\n        \"{{ID_BR}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/candidates/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.base_request).to.eql(pm.globals.get(\"ID_BR\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates/{{id_candidates}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"{{id_candidates}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/candidates/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.base_request).to.eql(pm.globals.get(\"ID_BR\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"person\":\r\n        \"{{ID_PERSON}}\",\r\n    \"base_request\":\r\n        \"{{ID_BR}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates/{{id_candidates}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"{{id_candidates}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/candidates/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.person).to.eql(pm.globals.get(\"ID_PERSON\"));\r",
											"        pm.expect(jsonData.base_request).to.eql(pm.globals.get(\"ID_BR\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"person\":\r\n        \"{{ID_PERSON}}\",\r\n    \"base_request\":\r\n        \"{{ID_BR}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates/{{id_candidates}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"{{id_candidates}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/{id}/candidate-progress/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates/{{id_candidates}}/candidate-progress/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"{{id_candidates}}",
										"candidate-progress",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/{id}/candidate-progress/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transitionId\": \"PASS_SIMPLE_STEP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates/{{id_candidates}}/candidate-progress/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"{{id_candidates}}",
										"candidate-progress",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "INTERVIEWER /persons/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//GET id_person\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_person\", jsonData.results[index].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "HR/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates/{{id_candidates}}/candidate-progress/steps/step-hr-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-hr-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "HR/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_hr_chart\", \"test-hr-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"//GET id_pso\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_hr_int_chart\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"2021-09-30T10:48:49.302Z\" ,\r\n    \"title\": \"{{title_hr_chart}}\",\r\n    \"knownInterviewers\": [\r\n        {\r\n            \"id\":\"{{id_person}}\"        \r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-hr-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-hr-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "HR/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-hr-interview",
										"sub-interviews",
										"{{id_hr_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "HR/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_hr_chart\", \"test-hr-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"2021-09-30T10:48:49.302Z\" ,\r\n    \"title\": \"{{title_hr_chart}}\",\r\n    \"knownInterviewers\": [\r\n        {\r\n            \"id\":\"{{id_person}}\"        \r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-hr-interview",
										"sub-interviews",
										"{{id_hr_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "HR/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_hr_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_hr_chart\", \"test-hr-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"2021-09-30T10:48:49.302Z\" ,\r\n    \"title\": \"{{title_hr_chart}}\",\r\n    \"knownInterviewers\": [\r\n        {\r\n            \"id\":\"{{id_person}}\"        \r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-hr-interview",
										"sub-interviews",
										"{{id_hr_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "HR/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-hr-interview/sub-interviews/{{id_hr_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-hr-interview",
										"sub-interviews",
										"{{id_hr_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POSITION/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates/{{id_candidates}}/candidate-progress/steps/step-position-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-position-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POSITION/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_position_chart\", \"test-position-int-chartflow\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"type_position_chart\", \"test-type-position-int-chartflow\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"test_position_interviewer\", \"test-interviewer\"+rnd);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"//GET id_pso\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_pos_int_chart\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:20:36.268Z\",\r\n  \"title\": \"{{title_position_chart}}\",\r\n  \"typeId\": \"client_interview\",\r\n  \"type\": {\r\n    \"title\": \"{{type_position_chart}}\"\r\n  },\r\n  \"unknownInterviewers\": [\r\n    {\r\n      \"name\": \"{{test_position_interviewer}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-position-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-position-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POSITION/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_chart\"));\r",
											"        pm.expect(jsonData.unknownInterviewers[0].name).to.eql(pm.environment.get(\"test_position_interviewer\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-position-interview",
										"sub-interviews",
										"{{id_pos_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POSITION/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_chart\"));\r",
											"        pm.expect(jsonData.unknownInterviewers[0].name).to.eql(pm.environment.get(\"test_position_interviewer\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_position_chart\", \"test-position-int-chartflow\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"type_position_chart\", \"test-type-position-int-chartflow\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"test_position_interviewer\", \"test-interviewer\"+rnd);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:20:36.268Z\",\r\n  \"title\": \"{{title_position_chart}}\",\r\n  \"typeId\": \"client_interview\",\r\n  \"type\": {\r\n    \"title\": \"{{type_position_chart}}\"\r\n  },\r\n  \"unknownInterviewers\": [\r\n    {\r\n      \"name\": \"{{test_position_interviewer}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-position-interview",
										"sub-interviews",
										"{{id_pos_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POSITION/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_position_chart\"));\r",
											"        pm.expect(jsonData.unknownInterviewers[0].name).to.eql(pm.environment.get(\"test_position_interviewer\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_position_chart\", \"test-position-int-chartflow\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"type_position_chart\", \"test-type-position-int-chartflow\"+rnd);\r",
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"test_position_interviewer\", \"test-interviewer\"+rnd);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:20:36.268Z\",\r\n  \"title\": \"{{title_position_chart}}\",\r\n  \"typeId\": \"client_interview\",\r\n  \"type\": {\r\n    \"title\": \"{{type_position_chart}}\"\r\n  },\r\n  \"unknownInterviewers\": [\r\n    {\r\n      \"name\": \"{{test_position_interviewer}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-position-interview",
										"sub-interviews",
										"{{id_pos_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POSITION/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-position-interview/sub-interviews/{{id_pos_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-position-interview",
										"sub-interviews",
										"{{id_pos_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TECH/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-tech-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-tech-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TECH/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_tech_chart\", \"test-tech-int-chartflow\"+rnd);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"//GET id_pso\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_tech_int_chart\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:41:14.066Z\",\r\n  \"title\": \"{{title_tech_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-tech-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-tech-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TECH/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-tech-interview",
										"sub-interviews",
										"{{id_tech_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TECH/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_tech_chart\", \"test-tech-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:41:14.066Z\",\r\n  \"title\": \"{{title_tech_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-tech-interview",
										"sub-interviews",
										"{{id_tech_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TECH/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_tech_chart\", \"test-tech-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_tech_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:41:14.066Z\",\r\n  \"title\": \"{{title_tech_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-tech-interview",
										"sub-interviews",
										"{{id_tech_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TECH/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-tech-interview/sub-interviews/{{id_tech_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-tech-interview",
										"sub-interviews",
										"{{id_tech_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TEST-ATTEST/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-test-attestation-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TEST-ATTEST/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_test_att_chart\", \"test-attestation-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"//GET id_pso\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_test_att_int_chart\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:51:26.000Z\",\r\n  \"title\": \"{{title_test_att_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-test-attestation-interview",
										"sub-interviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TEST-ATTEST/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_test_att_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-test-attestation-interview",
										"sub-interviews",
										"{{id_test_att_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TEST-ATTEST/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_test_att_chart\", \"test-attestation-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_test_att_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:51:26.000Z\",\r\n  \"title\": \"{{title_test_att_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-test-attestation-interview",
										"sub-interviews",
										"{{id_test_att_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TEST-ATTEST/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rnd = Math.floor((Math.random() * 10000) + 1);\r",
											"postman.setEnvironmentVariable(\"title_test_att_chart\", \"test-attestation-int-chartflow\"+rnd);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.title).to.eql(pm.environment.get(\"title_test_att_chart\"));\r",
											"        pm.expect(jsonData.knownInterviewers[0].id).to.eql(pm.environment.get(\"id_person\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-10-27T13:51:26.000Z\",\r\n  \"title\": \"{{title_test_att_chart}}\",\r\n  \"knownInterviewers\": [\r\n    {\r\n      \"id\": \"{{id_person}}\",\r\n      \"responsibilityAreaIds\": [\r\n        \"soft_skill\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-test-attestation-interview",
										"sub-interviews",
										"{{id_test_att_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TEST-ATTEST/candidates/{id}/candidate-progress/steps/step-hr-interview/sub-interviews/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/candidate-progress/steps/step-test-attestation-interview/sub-interviews/{{id_test_att_int_chart}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										"candidate-progress",
										"steps",
										"step-test-attestation-interview",
										"sub-interviews",
										"{{id_test_att_int_chart}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "/candidates/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/candidates//{{id_candidates}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										"",
										"{{id_candidates}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "replacement_requests_auto",
					"item": [
						{
							"name": "IN /persons/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//GET id_person\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var index = Math.trunc(Math.random()*jsonData.results.length);\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_person\", jsonData.results[index].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/persons/",
									"host": [
										"{{host}}"
									],
									"path": [
										"persons",
										""
									],
									"query": [
										{
											"key": "first_name",
											"value": "Rick",
											"disabled": true
										},
										{
											"key": "middle_name",
											"value": "Smith",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "HR Last_Name",
											"disabled": true
										},
										{
											"key": "english_level",
											"value": "advanced",
											"disabled": true
										},
										{
											"key": "office_location",
											"value": "USA",
											"disabled": true
										},
										{
											"key": "assigned_hrs",
											"value": "",
											"disabled": true
										},
										{
											"key": "relocation_desire",
											"value": "1b53cef9-a9aa-42b7-8061-6111f7333ae7",
											"disabled": true
										},
										{
											"key": "residence_type",
											"value": "b514bd47-4f7d-4bc0-8934-58898bb3b25b",
											"disabled": true
										},
										{
											"key": "role",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/candidates/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"//GET id_pso\r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_candidates\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"person\":\n        \"{{ID_PERSON}}\",\n    \"base_request\":\n        \"{{ID_BR}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/candidates/",
									"host": [
										"{{host}}"
									],
									"path": [
										"candidates",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/replacement-requests​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/replacement-requests/",
									"host": [
										"{{host}}"
									],
									"path": [
										"replacement-requests",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/replacement-requests​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"// Set var 'id' \r",
											"pm.test(\"Set variable id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    //console.log('This is jsonData', jsonData.id)\r",
											"    pm.environment.set(\"id_replacement_requests\", jsonData.id);\r",
											"    //pm.globals.set(\"id_PS\", jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"request_type\": \"candidate\",\r\n  \"billable_status\": \"billable\",\r\n  \"engagement_type\": \"new_business\",\r\n  \"job_type\": \"full_time\",\r\n  \"hours_per_day\": 8,\r\n  \"deadline\": \"2034-11-10\",\r\n  \"replacement_type\": \"shadow\",\r\n  \"replacement_start_date\": \"2021-11-10\",\r\n  \"replacement_end_date\": \"2030-11-10\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"staff_place_to_replace\": \"{{ID_STAFF_PLACES}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/replacement-requests/",
									"host": [
										"{{host}}"
									],
									"path": [
										"replacement-requests",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/replacement-requests​/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.staff_place_to_replace).to.eql(pm.globals.get(\"ID_STAFF_PLACES\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/replacement-requests/{{id_replacement_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"replacement-requests",
										"{{id_replacement_requests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/replacement-requests​/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.staff_place_to_replace).to.eql(pm.globals.get(\"ID_STAFF_PLACES\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"request_type\": \"candidate\",\r\n  \"billable_status\": \"billable\",\r\n  \"engagement_type\": \"new_business\",\r\n  \"job_type\": \"full_time\",\r\n  \"hours_per_day\": 8,\r\n  \"deadline\": \"2034-11-10\",\r\n  \"replacement_type\": \"shadow\",\r\n  \"replacement_start_date\": \"2021-11-10\",\r\n  \"replacement_end_date\": \"2030-11-10\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"staff_place_to_replace\": \"{{ID_STAFF_PLACES}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/replacement-requests/{{id_replacement_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"replacement-requests",
										"{{id_replacement_requests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/replacement-requests​/ {id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Equality checking\r",
											"pm.test(\"Verify that title_client and short_title_client is correct\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        //console.log('This is jsonData', jsonData.title)\r",
											"        pm.expect(jsonData.staff_place_to_replace).to.eql(pm.globals.get(\"ID_STAFF_PLACES\"));\r",
											"        pm.expect(jsonData.position).to.eql(pm.globals.get(\"ID_POSITION\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"request_type\": \"candidate\",\r\n  \"billable_status\": \"billable\",\r\n  \"engagement_type\": \"new_business\",\r\n  \"job_type\": \"full_time\",\r\n  \"hours_per_day\": 8,\r\n  \"deadline\": \"2034-11-10\",\r\n  \"replacement_type\": \"shadow\",\r\n  \"replacement_start_date\": \"2021-11-10\",\r\n  \"replacement_end_date\": \"2030-11-10\",\r\n  \"position\": \"{{ID_POSITION}}\",\r\n  \"staff_place_to_replace\": \"{{ID_STAFF_PLACES}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/replacement-requests/{{id_replacement_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"replacement-requests",
										"{{id_replacement_requests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "​/replacement-requests​/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/replacement-requests/{{id_replacement_requests}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"replacement-requests",
										"{{id_replacement_requests}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OUT /position-seats-occupations/ {id}/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/position-seat-occupations/{{id_pso}}/",
									"host": [
										"{{host}}"
									],
									"path": [
										"position-seat-occupations",
										"{{id_pso}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Salary_auto",
			"item": [
				{
					"name": "/salary/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/salary/",
							"host": [
								"{{host}}"
							],
							"path": [
								"salary",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/salary/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); // Why it's not 201?"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"persons_salary\": [\n    {\n      \"id\": \"{{ID_PERSON}}\",\n      \"salary\": \"test-salary\"\n    }\n  ],\n  \"interviews_salary\": [\n    {\n      \"id\": \"{{ID_PERSON}}\",\n      \"salary\": \"test-interviews-salary\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/salary/",
							"host": [
								"{{host}}"
							],
							"path": [
								"salary",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/lock/{id} after seeing salary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key_change_in_progress\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/lock/{{ID_LOCK}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"lock",
								"{{ID_LOCK}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "/users/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"id_user\", jsonData[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/users​/change_password​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"old_password\": \"P@ssw0rd\",\r\n  \"new_password\": \"P@ssw0rd1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/change_password/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"change_password",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/users​/invite_link​/create​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"emails\": [\r\n    \"test.inbox@akvelon.com\"\r\n  ],\r\n  \"role\": \"head\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/invite_link/create/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"invite_link",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/jwt/create/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
									"});\r",
									"//GET id_residence \r",
									"pm.test(\"Set variable id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //console.log('This is jsonData', jsonData.id)\r",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh);\r",
									"    pm.environment.set(\"access_token\", jsonData.access);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin@admin.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "P@ssw0rd1",
									"type": "text"
								},
								{
									"key": "email",
									"value": "rushat.kadyrov@akvelon.com",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "cinGetline98",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/jwt/create/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/jwt/refresh/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"refresh\": \"{{refresh_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/jwt/refresh/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"jwt",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/jwt/verify/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"{{access_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/jwt/verify/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"jwt",
								"verify",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/me/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/me/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/me/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"date_joined\": \"2021-10-18T14:36:08.691Z\",\n  \"system_role\": \"head\",\n  \"email\": \"admin@admin.com\",\n  \"is_active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/me/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/me/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"date_joined\": \"2021-10-18T14:36:08.691Z\",\r\n  \"system_role\": \"head\",\r\n  \"email\": \"admin@admin.com\",\r\n  \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/me/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/users​/registration​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400, because there is no token\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"full_name\": \"Rushat Kadyrov\",\r\n  \"password\": \"P@ssw0rd1\",\r\n  \"token\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/registration/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"registration",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/{{id_user}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_user}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400, can't be automated yet\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/{{id_user}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_user}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"system_role\": \"head\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/{{id_user}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{id_user}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/password_reset/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // not existing email"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/password_reset/",
							"host": [
								"{{host}}"
							],
							"path": [
								"password_reset",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/password_reset​/confirm​/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // not existing email and token"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"\",\r\n  \"token\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/password_reset/confirm/",
							"host": [
								"{{host}}"
							],
							"path": [
								"password_reset",
								"confirm",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "​/password_reset​/validate-token/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); // can't be automated yet"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"token\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/password_reset/validate-token/",
							"host": [
								"{{host}}"
							],
							"path": [
								"password_reset",
								"validate-token",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JWT_ACCESS}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.test(\"Response time is less than 200ms\", function () {",
					"//     pm.expect(pm.response.responseTime).to.be.below(200);",
					"// });"
				]
			}
		}
	]
}